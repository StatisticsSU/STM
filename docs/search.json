[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Theory and Modelling, 7.5 hp",
    "section": "",
    "text": "Aim\n\nThis is a course on the Master‚Äôs Program in Data Science, Statistics and Decision Analysis at Stockholm University.\nThe course is specifically designed to bridge between the basic course Statistics and Data Analysis for Computer and Systems Sciences, 15 hp and the master‚Äôs level course Bayesian Learning, 7.5 hp. The objective is therefore to provide a focused course in the probability, statistical theory and modeling needed to follow the Bayesian Learning course.\n\n\n\nContents\n\nMathematical methods: derivatives, integrals, optimization, numerical optimization, vectors and matrices.\nProbability theory: discrete and continuous stochastic variables, density and probability functions, distribution functions, multivariate distributions, multivariate normal distribution, marginal distributions, conditional distributions, independence, expected value, variance, and covariance, functions of stochastic variables, sampling distributions, law of large numbers, central limit theorem.\nModelling and prediction: linear and non-linear regression, dummy variables and interactions, model selection, cross-validation, overfitting, regularization, classification, logistic regression, multinomial logistic regression, Poisson regression.\nInference: point estimation, bias-variance trade-off, maximum likelihood (ML), likelihood theory, numerical optimization for ML estimation, bootstrap.\nTime series: trend and seasonality, autocorrelation, autoregressive models.\n\n\n\nLiterature\n\nWackerley, Mendenhall and Scheaffer (2021). Mathematical Statistics with Applications, 7th edition, Cengage.\nAdditional material and handouts distributed during the course.\n\n\n\nStructure\nThe course consists of lectures, mathematical exercises and computer labs.\n\n\nExamination\nThe course is examined by a\n\nwritten exam (grades A-F)\nhome assignment (grade pass/fail).\n\n\n\nSchedule\nThe course schedule can be found on TimeEdit. A tip is to select Subscribe in the upper right corner of TimeEdit and then paste the link into your phone‚Äôs calendar program.\n\n\nFormula cheet sheets\n\n\nInteractive material\nThe course makes heavy use of interactive Observable notebooks in javascript that runs in your browser. The widgets will be linked below each relevant lecture. All widgets used in the course are available here.\n\n\nTeachers\n\n\n\n\n\n\n\nMattias VillaniCourse responsible  lecturerProfessor\n\n\n\nFasna KottakkunnanExercisesComputer labs\n\n\n\n\n\nRalf XhaferiExercisesComputer labs"
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises for Statistical Theory and Modelling, 7.5 hp",
    "section": "",
    "text": "The course builds on mathematical and statistical concepts that you need to train on by solving many exercises.\n\n\nSchedule\nThe course schedule can be found on TimeEdit.\n\n\nLiterature - problems\nThe exercise numbers below uses the numbering in the course book (denoted by MSA below):  Wackerley, Mendenhall and Scheaffer (2021). Mathematical Statistics with Applications, 7th edition, Cengage. Note: Problems in the book marked with Applet exercises should be solved with the Observable widgets for the course.\n\n\nExercise problems\nExercise 1 - Differentiation, optimization and integration.\nProblems: MSA X.X, Y.Y, ‚Ä¶\nExercise 2 - Discrete random variables.\nProblems: MSA 3.1, 3.9, 3.12, 3.33, 3.39, 3.40, 3.92, 3.93, 3.94, 3.122, 3.124, 3.125, 3.167\nExercise 3 - Continuous random variables.\nProblems: MSA 4.9, 4.11, 4.12, 4.14, 4.20, 4.30, 4.71, 4.88, 4.105a. 4.109, 4.110, 4.114a-d, 4.128\nExercise 4 - Joint and conditional distributions.\nProblems: MSA 5.4, 5.16, 5.5, 5.7, 5.25, 5.36, 5.48, 5.60, 5.61, 5.76, 5.89, 5.91, 5.103, 5.114 (hint: these are well-known distributions), 5.136, 5.141.\nInteractive problems: W4.1, W4.2\nExercise 5 - Transformation of variables. Law of large numbers. Central limit theorem.\nProblems: MSA 6.4a, 6.12, 6.24, 6.26.\nInteractive problems: W5.1, W5.2\nExercise 6 - Maximum likelihood estimation.\nProblems: MSA 9.80, 9.81, 9.85a, 9.97b, 9.98, 9.103.\nExercise 7 - Linear algebra. Linear regression in matrix form.\nProblems: MSA 5.131a, 11.66, 11.68 (use R to compute the matrix inverse)\nExercise 8 - Time series\nProblems: MSA X.X, Y.Y, ‚Ä¶"
  },
  {
    "objectID": "interactive_exercises.html",
    "href": "interactive_exercises.html",
    "title": "Interactive exercises",
    "section": "",
    "text": "A good way to learn Statistics is to experiment with different distributions etc by changing parameters interactively. These interactive exercises makes use of the Observable widgets for the course.\n\n\nInteractive exercises\n\nWx.y is the interactive widget exercise for Chapter x Problem y.\n\nExercise 1 - Differentiation, optimization and integration.\nProblems:\nExercise 2 - Discrete random variables.\nProblems:\nExercise 3 - Continuous random variables\nProblems:\nExercise 4 - Joint and conditional distributions.\nProblems:\nExercise 5 - Transformation of variables\n\nExercise 6 - Maximum likelihood estimation.\nProblems:\nExercise 7 - Linear algebra. Linear regression in matrix form.\nProblems:\nExercise 8 - Time series\nProblems:"
  },
  {
    "objectID": "interactive_exercises/Chapter5.html",
    "href": "interactive_exercises/Chapter5.html",
    "title": "Interactive Exercises - Chapter 5",
    "section": "",
    "text": "Problem W5.1\nUse the widget for the law of large numbers for this exercise with the population parameters \\(\\mu=3\\) and \\(\\sigma=0.2\\).\n\nWhat is the smallest sample size \\(n\\) that gives a probability of at most \\(0.01\\) for the event that the sample mean deviates from its mean \\(\\mu = 3\\) by at least \\(\\epsilon = 0.1\\) units? That is, use the widget to determine the smallest \\(n\\) for which \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.1) \\leq 0.01.\\]\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe sample size \\(n=26\\) gives \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.1) \\approx 0.01079\\] so this sample size is not large enough. However, for \\(n=27\\) we get \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.1) \\approx 0.009375,\\] which is smaller than the required probability of \\(0.01\\). So \\(n=27\\) is the smallest possible sample size. Check for yourself: \n\n\n\n\nLet‚Äôs be even more demanding now and require that the sample mean can deviate by at most \\(\\epsilon = 0.01\\) units from the mean \\(\\mu\\). What is now the smallest sample size \\(n\\) that achieves this?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe sample size \\(n=2654\\) is the smallest \\(n\\) and \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.01) \\approx 0.009999\\]\n\n\n\n\n\n\nProblem W5.2\nUse the widget for the central limit theorem for this exercise.\n\nChoose the Beta distribution with parameters \\(\\alpha=0.5\\) and \\(\\beta=0.5\\) as the data distribution. Set sample size \\(n=2\\) and look at the orange histogram that shows the sampling distribution of the sample mean for a sample of size \\(n=2\\). Does it look normally distributed? Continue to increase sample size \\(n\\) to 3, 4, 5 and so on. How large \\(n\\) do you need for the sampling distribution to be approximately normal?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFor \\(n=2\\) the distribution is no longer bathtub shaped, but it is clearly not normal (yet). It is hard to say exactly of course, but already for \\(n=10\\) is the sampling distribution roughly bell shaped like the normal distribution.\n\n\n\n\nrepeat Problem W5.2a, but now for the chi-squared distribution with \\(\\nu=3\\) degrees of freedom.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIt takes at least until \\(n=20\\) for the sampling distribution to no longer have the long right hand tail of the chi-squared distribution.\n\n\n\n\nrepeat Problem W5.2a, but now for the Cauchy distribution with location \\(m=0\\) and scale \\(\\gamma=1\\). How large must \\(n\\) be before the sampling distribution of \\(\\bar{X}\\) seems to be approximately normal?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe Cauchy distribution is one of the cases where the central limit theorem does not hold. No matter how large you make \\(n\\), the distribution of \\(\\bar{X}\\) will never be normal. The mean and variance of the Cauchy do not exist, which violates the assumptions of the theorem; it has so extremely heavy tails that the mean does not exist, even though the Cauchy distribution is symmetric around the location \\(m\\). ü§Ø"
  },
  {
    "objectID": "interactive_exercises/Chapter4.html",
    "href": "interactive_exercises/Chapter4.html",
    "title": "Interactive Exercises - Chapter 4",
    "section": "",
    "text": "Problem W4.1\nUse the widget for the gamma distribution in the scale parameterization (the one used in the course book) for this exercise. Note that the names for the two parameters in the Gamma distribution is not \\(\\alpha\\) and \\(\\beta\\) as in the book, but instead \\(\\alpha\\) and \\(\\theta\\). C‚Äôest la vie. ü§∑‚Äç‚ôÇÔ∏è\n\nStart with the \\(\\mathrm{Gamma}(3,1)\\) distribution and gradually move the first parameter \\(\\alpha\\) toward 1. What happens with the shape of the distribution at \\(\\alpha = 1\\)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe distribution for \\(\\alpha = 1\\) becomes highest in the point \\(x=0\\) with a monotonically decreasing density in \\(x\\). The Gamma distribution with \\(\\alpha = 1\\) is actually the exponential distribution.\n\n\n\n\nLet us explore the effect of the second parameter, the scale parameter \\(\\theta\\).\n\n\nSet \\(\\alpha=2\\) and \\(\\theta=2\\). What is the mean and variance? What is \\(\\mathrm{Pr}(X\\leq 3)\\)?\nSet \\(\\alpha=4\\) and \\(\\theta=1\\), what is the mean and variance and \\(\\mathrm{Pr}(X\\leq 3)\\) now?\nWhat if \\(\\alpha=16\\) and \\(\\theta=0.25\\)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe mean \\(E(X)= \\alpha \\theta\\) is the same in all the three settings and the variance \\(V(X)=\\alpha \\theta^2\\) decreases as \\(\\theta\\) becomes smaller, and so does \\(\\mathrm{Pr}(X\\leq 3)\\)."
  },
  {
    "objectID": "tutorial/numericalML/numericalML.html",
    "href": "tutorial/numericalML/numericalML.html",
    "title": "Maximum likelihood by numerical optimization",
    "section": "",
    "text": "In this tutorial you will learn how maximum likelihood estimates and standard errors can be computed by numerical optimization routines in R. We learn about a general way to compute a normal approximation of the sampling distribution of the maximum likelihood estimator, which can be proved to be accurate in large samples, but is typically surprisingly accurate also for smaller sample sizes.\n\nIt will take some work to get to the end of the document, but by the end of it you will have learned invaluable tools for a statistician/data scientist/machine learner giving you the super-power üí™ to use the computer to estimate the parameters and their uncertainty in quite complex models.\nWe will start with simple models with a single parameter to cover all the concepts, and then move on to the practically more important multi-parameter case.\nLet‚Äôs first load some useful libraries (install them using install.packages() if you haven‚Äôt already).\n\nlibrary(latex2exp) # for plotting mathematical symbols (LaTeX)\nlibrary(remotes)   # for loading packages from GitHub\nlibrary(ggplot2)   # for fancy plotting\nlibrary(mvtnorm)   # the multivariate normal distribution"
  },
  {
    "objectID": "tutorial/numericalML/numericalML.html#footnotes",
    "href": "tutorial/numericalML/numericalML.html#footnotes",
    "title": "Maximum likelihood by numerical optimization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe data comes from the paper: Wegmann, B. och Villani, M. (2011). Bayesian Inference in Structural Second-Price Common Value Auctions, Journal of Business and Economic Statistics pdf‚Ü©Ô∏é\nIf we want to actually interpret these joint probabilities, we can consider looking at the average probability per observation. This average probability will not become tiny when we look at more and more observations, it remains interpretable. The usual arithmetic mean\n\\[\\frac{1}{n}\\sum_ {i=1}^n P(y_i \\vert \\lambda)\\]\nis not so great for averaging probabilities, however. The geometric mean\n\\[\\Big(\\prod_ {i=1}^n P(y_i \\vert \\lambda)\\Big)^{\\frac{1}{n}}\\]\nhas nicer properties, so we would use that.‚Ü©Ô∏é"
  },
  {
    "objectID": "tutorial/statespace/statespace.html",
    "href": "tutorial/statespace/statespace.html",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "",
    "text": "This tutorial gives a very brief introduction to state-space models, along with inference methods like Kalman filtering, smoothing and forecasting. The methods are illustrated using the R package dlm , exemplified with the local level model fitted to the well-known Nile river data. The tutorial is also sprinkled with some cool interactivity in Javascript."
  },
  {
    "objectID": "tutorial/statespace/statespace.html#piecewise-constant-model",
    "href": "tutorial/statespace/statespace.html#piecewise-constant-model",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "Piecewise constant model",
    "text": "Piecewise constant model\nAn extremely simple model for a time series is to treat the observations as independent normally distributed with the same mean \\(\\mu\\) and variance \\(\\sigma_\\varepsilon\\)\n\\[\ny_t = \\mu + \\varepsilon_t, \\quad \\varepsilon_t \\sim N(0, \\sigma_\\varepsilon^2)\n\\]\n\n\nShow the code\n#install.packages(\"latex2exp\")\nlibrary(latex2exp)\nn = 200\nmu = 2\nsigma_eps = 1\ny = rnorm(n, mean = mu, sd = sigma_eps)\nplot(seq(1,n), y, type = \"l\", col = \"steelblue\", xlab = \"time, t\", ylab = \"y_t\", lwd = 1.5,\n    main = \"Simulated data from the naive iid model\")\nlines(seq(1,n), rep(mu,n), type = \"l\", col = \"orange\")\nlegend(\"topright\", legend = c(TeX(\"$y_t$\"), TeX(\"$\\\\mu$\")), lty = 1, lwd = 1.5, \n    col = c(\"steelblue\", \"orange\"))\n\n\n\n\n\n\n\n\n\nThis model is of course not something to write home about, it basically ignores the time series nature of the data. Let us start to make it a little more interesting by allowing the mean to vary of time. This means that we will have a time-varying parameter model where the mean \\(\\mu_t\\) changes (abruptly) at certain time points \\(t_1, t_2, \\dots, t_K\\):\n\\[\ny_t = \\mu_t + \\varepsilon_t, \\quad \\varepsilon_t \\sim N(0, \\sigma_\\varepsilon^2)\n\\]\n\\[\n\\begin{align}   \n\\mu_t &=\n\\begin{cases}            \n  \\mu_1 & \\text{if $1 \\leq t \\leq t_1$} \\\\\n  \\mu_2 & \\text{if $t_1 &lt; t \\leq t_2$} \\\\            \n  \\vdots & \\vdots \\\\\n  \\mu_K & \\text{if $t_{K-1} &lt; t \\leq T$}. \\\\          \n\\end{cases}\n\\end{align}\n\\]\nHere is a widget that lets you simulate data from the piecewise constant model1."
  },
  {
    "objectID": "tutorial/statespace/statespace.html#local-level-model",
    "href": "tutorial/statespace/statespace.html#local-level-model",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "Local level model",
    "text": "Local level model\nThe piecewise constant model has a few abrupt changes in the mean, but what if the mean changes more gradually? The local level model has a constantly changing mean following a random walk model:\n\\[y_t = \\mu_t + \\varepsilon_t,\\qquad \\varepsilon_t \\sim N(0,\\sigma_\\varepsilon^2)\\]\n\\[\\mu_t = \\mu_{t-1} + \\eta_t,\\qquad \\eta_t \\sim N(0,\\sigma_\\eta^2)\\]\nwhich models the observed time series \\(y_t\\) as a mean \\(\\mu_t\\) plus a random measurement error or disturbance \\(\\varepsilon_t\\). The mean \\(\\mu_t\\) evolves over time as a random walk driven by innovations \\(\\eta_t\\).\nHere is a widget that simulates data from the model. Go ahead, experiment with the measurement/noise \\(\\sigma_\\varepsilon\\) and the standard deviation of the innovations to the mean process, \\(\\sigma_\\eta\\). For example, drive \\(\\sigma_\\eta\\) toward zero and note how the mean becomes close to constant over time."
  },
  {
    "objectID": "tutorial/statespace/statespace.html#regression-with-time-varying-parameters",
    "href": "tutorial/statespace/statespace.html#regression-with-time-varying-parameters",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "Regression with time-varying parameters",
    "text": "Regression with time-varying parameters\nThe usual simple linear time series regression model is\n\\[\ny_t = \\alpha + \\beta x_t  + \\varepsilon_t, \\quad \\varepsilon_t \\sim N(0, \\sigma_\\varepsilon^2) \\qquad t=1,\\ldots,T\n\\]\nwhere \\(y_t\\) is a time series response variable (for example electricity price) that is being explained by the explanatory variable \\(x_t\\) (for example temperature). This model assumes that the parameters \\(\\alpha\\), \\(\\beta\\) and \\(\\sigma_\\varepsilon\\) are constant in time, that the relationship between electricity price and temperature has remained the same throughout the whole observed time period.\nIt sometimes makes sense to let the parameters vary with time. Here is one such model, the time-varying regression model:\n\\[\n\\begin{align}  \ny_t &= \\alpha_{t} + \\beta_{t} x_t  + \\varepsilon_t, \\quad \\varepsilon_t \\sim N(0, \\sigma_\\varepsilon^2)  \\\\  \n\\alpha_{t} &= \\alpha_{t-1} + \\eta_t, \\qquad \\quad \\eta_t \\sim N(0, \\sigma_\\alpha^2)   \\\\  \n\\beta_{t} &= \\beta_{t-1} + \\nu_t, \\qquad \\quad \\nu_t \\sim N(0, \\sigma_\\beta^2)\n\\end{align}\n\\]\nwhere the intercept \\(\\alpha\\) now has a time \\(t\\) subscript and evolves in time following a random walk process\n\\[\\alpha_{t} = \\alpha_{t-1} + \\eta_t, \\qquad \\quad \\eta_t \\sim N(0, \\sigma_\\alpha^2)\\]\nso that in every time period, the intercept changes by adding on an innovation \\(\\eta_t\\) drawn from a normal distribution with standard deviation \\(\\sigma_\\alpha\\). This standard deviation therefore controls how much the intercept changes over time. The slope \\(\\beta\\) changes over time in a similar fashion, with the speed of change determined by \\(\\sigma_\\beta\\).\nHere is a widget that simulates data from the time-varying regression above. By moving the slider (show regline at time) you can plot the regression line \\(\\alpha_t + \\beta_t x_t\\) at any time period \\(t\\). The single data point at that time period is the larger dark red point. The plot also highlights (darker blue) data points that are closer in time to the time chosen by the slider. To the left you can see the whole time path of the simulated \\(\\alpha\\) and \\(\\beta\\) with the current parameters highlighted by dots."
  },
  {
    "objectID": "tutorial/statespace/statespace.html#state-space-model---filtering-smoothing-and-forecasting",
    "href": "tutorial/statespace/statespace.html#state-space-model---filtering-smoothing-and-forecasting",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "State-space model - filtering, smoothing and forecasting",
    "text": "State-space model - filtering, smoothing and forecasting\n\nThe state space model\nAll of the models above, and many, many, many more can be written as a so called state-space model. A state-space model for a univariate time series \\(y_t\\) with a state vector \\(\\boldsymbol{\\theta}_t\\) can be written as\n\\[\n\\begin{align}\ny_t &= \\boldsymbol{F} \\boldsymbol{\\theta}_t + v_t,\\hspace{1.5cm} v_t \\sim N(\\boldsymbol{0},\\boldsymbol{v})  \\\\\n\\boldsymbol{\\theta}_t &= \\boldsymbol{G} \\boldsymbol{\\theta}_{t-1} + \\boldsymbol{w}_t, \\qquad \\boldsymbol{w}_t \\sim N(\\boldsymbol{0},\\boldsymbol{W})\n\\end{align}\n\\]\nFor example, the local level model is a state-space model with a single scalar state variable \\(\\boldsymbol{\\theta}_t = \\mu_t\\) and parameters\n\\[\n\\begin{align}\n\\boldsymbol{F} &= 1 \\\\\n\\boldsymbol{G} &= 1  \\\\\n\\boldsymbol{V} &= \\sigma_\\varepsilon^2 \\\\\n\\boldsymbol{W} &= \\sigma_\\nu^2\n\\end{align}\n\\]\nWe learn about the state \\(\\mu_t\\) from the observed time series \\(y_t\\) . The first equation is often called the observation or measurement model since it gives the connection between the unobserved state and the observed measurements. The measurements can also be a vector, but we will use a single measurement in this tutorial. The second equation is called the state transition model since it determines how the state evolves over time.\nWe can even let the state-space parameters \\(\\boldsymbol{F}, \\boldsymbol{G}, \\boldsymbol{V}, \\boldsymbol{W}\\) be different i every time period. This is in fact needed if we want to write the time-varying regression model in state-space form. Recall the time varying regression model\n\\[\n\\begin{align}  \ny_t &= \\alpha_{t} + \\beta_{t} x_t  + \\varepsilon_t, \\quad \\varepsilon_t \\sim N(0, \\sigma_\\varepsilon^2)  \\\\  \n\\alpha_{t} &= \\alpha_{t-1} + \\eta_t, \\qquad \\quad \\eta_t \\sim N(0, \\sigma_\\alpha^2)   \\\\  \n\\beta_{t} &= \\beta_{t-1} + \\nu_t, \\qquad \\quad \\nu_t \\sim N(0, \\sigma_\\beta^2)\n\\end{align}\n\\]\nWe can tuck the two time-varying parameters in a vector \\(\\boldsymbol{\\beta}_t=(\\alpha_t,\\beta_t)^\\top\\) and also write the models as\n\\[\n\\begin{align}  \ny_t &= \\boldsymbol{x}_t^\\top\\boldsymbol{\\beta}_{t}   + \\varepsilon_t, \\hspace{0.8cm} \\varepsilon_t \\sim N(0, \\sigma_\\varepsilon^2)  \\\\    \n\\boldsymbol{\\beta}_{t} &= \\boldsymbol{\\beta}_{t-1} + \\boldsymbol{w}_t, \\quad \\quad \\nu_t \\sim N(0, \\boldsymbol{W})\n\\end{align}\n\\]\nwhere\n\\[\n\\begin{align}  \n\\boldsymbol{x}_t &= (1,x_t)^\\top  \\\\    \n\\boldsymbol{w}_t &= (\\eta_t,\\nu_t)^\\top  \\\\\n\\boldsymbol{W} &=\n\\begin{pmatrix}\n\\sigma_\\alpha^2 & 0 \\\\\n0               & \\sigma_\\eta^2\n\\end{pmatrix}\n\\end{align}\n\\]\nNote this is a state-space model with\n\\[\n\\begin{align}\n\\boldsymbol{F}_t &= \\boldsymbol{x}_t\\\\\n\\boldsymbol{G} &=\n\\begin{pmatrix}\n1 & 0 \\\\\n0 & 1\n\\end{pmatrix} \\\\\n\\boldsymbol{V} &= \\sigma_\\varepsilon^2 \\\\\n\\boldsymbol{W} &=\n\\begin{pmatrix}\n\\sigma_\\alpha^2 & 0 \\\\\n0               & \\sigma_\\eta^2\n\\end{pmatrix}\n\\end{align}\n\\]\nand note now that \\(\\boldsymbol{F}\\) changes in every time period, hence the subscript \\(t\\).\n\n\nFiltering and smoothing\nThere are two different types of relevant inferences in state-space models, filtering and smoothing:\n\nThe filtered estimate \\(\\hat{\\boldsymbol{\\theta}}_{t|t}\\) of the state \\(\\boldsymbol{\\theta}_t\\) uses data up to time \\(t\\).\nThe smoothed estimate \\(\\hat{\\boldsymbol{\\theta}}_{t|T}\\) of the state \\(\\boldsymbol{\\theta}_t\\) uses data up to time \\(T\\), the end of the time series.\n\nThe filtered estimate is therefore the instantaneous estimate, giving the best estimate of the current state. The smoothed estimate is the retrospective estimate that looks back in time and gives us the best estimate using all the data.\nFiltering means to compute the sequence of instantaneous estimates of the unobserved state at every time point \\(t=1,2,\\ldots,T\\)\n\\[\n\\hat{\\boldsymbol{\\theta}}_{1|1},\\hat{\\boldsymbol{\\theta}}_{2|2},\\ldots,\\hat{\\boldsymbol{\\theta}}_{T|T}\n\\]\nWe will take a time series and compute the filtered estimates for the whole time series, but it is important to understand that filtering is often done in real-time, which means it is a continously ongoing process that returns filtered estimates of the state \\(\\boldsymbol{\\theta}_t\\) as time progresses and new measurements \\(y_t\\) come in. Think about a self-driving car that is continously trying to understand the environment (people, other cars, the road conditions etc). The environment is the state and the car uses its sensors to collect measurements. The filtering estimates tells the car about the best guess for the environment at every point in time.\nFor state-space models of the type discussed here (linear measurement equation and linear evolution of the state, with independent Normal measurement errors and state innovations), the filtered estimates are computed with one of the most famous algorithms in statistics: the Kalman filter.\nThe Kalman filter is a little messy to write up, we will do it for completeness, but we will use a package for it so don‚Äôt worry if the linear algebra is intidimating. We will use the notation \\(\\boldsymbol{\\mu}_{t|t}\\) instead of \\(\\hat{\\boldsymbol{\\theta}}_{t|t}\\), but they really mean the same.\n\ntime \\(t = 0\\). The Kalman filter starts with mean \\(\\boldsymbol{\\mu}_{0|0}\\) and covariance matrix \\(\\boldsymbol{\\Omega}_{0|0}\\) for the state at time \\(t=0\\). Think about \\(\\boldsymbol{\\mu}_{0|0}\\) as the best guess \\(\\boldsymbol{\\theta}_0\\) of the state vector at time \\(t=0\\) and \\(\\boldsymbol{\\Omega}_{0|0}\\) representing how sure we can be about this guess2.\ntime \\(t = 1\\). The Kalman filter then uses the first measurement \\(y_1\\) to update \\(\\boldsymbol{\\mu}_{0|0} \\rightarrow \\boldsymbol{\\mu}_{1|1}\\) and \\(\\boldsymbol{\\Omega}_{0|0} \\rightarrow \\boldsymbol{\\Omega}_{1|1}\\) to represent the estimate and the uncertainty for \\(\\boldsymbol{\\theta}_1\\), the state at time \\(t=1\\).\ntime \\(t = 2,...,T\\). It then continues in this fashion using the next measurement \\(y_2\\) to compute \\(\\boldsymbol{\\mu}_{2|2}\\) and \\(\\boldsymbol{\\Omega}_{2|2}\\) and so on all the way to the end of the time series to finally get \\(\\boldsymbol{\\mu}_{T|T}\\) and \\(\\boldsymbol{\\Omega}_{T|T}\\).\n\nHere is the Kalman filter algorithm:\n\n\nInitialization: set \\(\\boldsymbol{\\mu}_{0|0}\\) and \\(\\boldsymbol{\\Omega}_{0|0}\\)\nfor \\(t=1,\\ldots,T\\) do\n\nPrediction update\\[\n\\begin{align}\n\\boldsymbol{\\mu}_{t|t-1} &= \\boldsymbol{G} \\boldsymbol{\\mu}_{t-1|t-1} \\\\  \n\\boldsymbol{\\Omega}_{t|t-1} &= \\boldsymbol{G}\\boldsymbol{\\Omega}_{t-1|t-1}  \\boldsymbol{G}^\\top + \\boldsymbol{W}\n\\end{align}\n\\]\nMeasurement update\\[\n\\begin{align}\n\\boldsymbol{\\mu}_{t|t} &= \\boldsymbol{\\mu}_{t|t-1} + \\boldsymbol{K}_t ( y_t - \\boldsymbol{F} \\boldsymbol{\\mu}_{t|t-1}  )  \\\\  \n\\boldsymbol{\\Omega}_{t|t} &= (\\boldsymbol{I} - \\boldsymbol{K}_t \\boldsymbol{F} )\\boldsymbol{\\Omega}_{t|t-1}\n\\end{align}\n\\]\n\n\nwhere \\[\\boldsymbol{K}_t = \\boldsymbol{\\Omega}_{t|t-1}\\boldsymbol{F}^\\top ( \\boldsymbol{F} \\boldsymbol{\\Omega}_{t|t-1}\\boldsymbol{F}^\\top + \\boldsymbol{V})^{-1}\\] is the Kalman Gain.\n\nThe widget below lets you experiment with the Kalman filter for the local level model fitted to the Nile river data. In the widget we infer (filter) the local levels \\(\\mu_1,\\mu_2,\\ldots,\\mu_T\\) and can experiment with the measurement standard deviation \\(\\sigma_\\varepsilon\\), the standard deviation of the innovations to the local mean \\(\\sigma_\\eta\\), and also the initial guess for \\(\\mu_0\\) and the standard deviation \\(\\sigma_0\\) of that guess.\nHere are few things to try out in the widget below:\n\nIncrease the measurement standard deviation \\(\\sigma_\\varepsilon\\) and note how the filtered mean pays less and less attention to changes in the data (because the model believes that the data is very poor quality (noisy) and tells us basically nothing about the level). Then move \\(\\sigma_\\varepsilon\\) to smaller values and note how the filtered mean starts chasing the data (because the model believes that the data are super informative about the level).\nMake the standard deviation for the initial level \\(\\sigma_0\\) very small and then change the initial mean \\(\\mu_0\\) to see how this affects the filtered mean at the first part of the time series.\nMove the standard deviation of the innovations to the level \\(\\sigma_\\eta\\) small and note how the filtered mean becomes smoother and smoother over time."
  },
  {
    "objectID": "tutorial/statespace/statespace.html#the-dlm-package-in-r",
    "href": "tutorial/statespace/statespace.html#the-dlm-package-in-r",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "The dlm package in R",
    "text": "The dlm package in R\nThe dlm package is a user-friendly R package for analyzing some state-space models. The package has a nice vignette that is worth reading if you plan to use the package more seriously.\n\nFiltering\nLet‚Äôs first do some filtering in the dlm package. Start by loading the dlm package:\n\n#install.packages(\"dlm\") # uncomment the first time to install.\nlibrary(dlm)\n\nWe now need to tell the dlm package what kind of state-space model we want to estimate. The means setting up the matrices \\(\\boldsymbol{F}\\), \\(\\boldsymbol{G}\\), \\(\\boldsymbol{V}\\) and \\(\\boldsymbol{W}\\). We will keep it simple and use the local level model as example, where all parameter matrices \\(\\boldsymbol{F}\\), \\(\\boldsymbol{G}\\), \\(\\boldsymbol{V}\\) and \\(\\boldsymbol{W}\\) are scalars (single numbers). As we have seen above, the local level model corresponds to a state-space model with parameters\n\\[\n\\begin{align}\n\\boldsymbol{\\theta}_t &= \\mu_t \\\\\n\\boldsymbol{F} &= 1 \\\\\n\\boldsymbol{G} &= 1  \\\\\n\\boldsymbol{V} &= \\sigma_\\varepsilon^2 \\\\\n\\boldsymbol{W} &= \\sigma_\\eta^2\n\\end{align}\n\\]\nSo we only need to set \\(\\sigma_\\varepsilon^2\\) and \\(\\sigma_\\eta^2\\) to start the fun. We will for now set \\(\\sigma_\\varepsilon^2 = 100^2\\) and \\(\\sigma_\\eta^2 = 100^2\\), and return to this when we learn how the dlm package can find maximum likelihood estimates for these parameters. Here is how you setup the local level model in the dlm package:\n\nmodel = dlm(FF = 1, V = 100^2, GG = 1, W = 100^2, m0 = 1000, C0 = 1000^2)\n\nCompute the filtering estimate using the Kalman filter and plot the result\n\nnileFilter &lt;- dlmFilter(Nile, model)\nplot(Nile, type = 'l', col = \"steelblue\")\nlines(dropFirst(nileFilter$m), type = 'l', col = \"orange\")\nlegend(\"bottomleft\", legend = c(\"Observed\", \"Filtered\"), lty = 1, \n    col = c(\"steelblue\", \"orange\"))\n\n\n\n\n\n\n\n\n\n\nParameter estimation by maximum likelihood\nThe parameters \\(\\sigma_\\varepsilon^2\\) and \\(\\sigma_\\eta^2\\) were just set to some values above. Let‚Äôs instead estimate them by maximum likelihood. The function dlmMLE does this for us, but we need to set up a model build object so the dlm package knows which parameter to estimate. We reparameterize the two variances using the exponential function to ensure that the estimated variances are positive.\n\n modelBuild &lt;- function(param) {\n   dlm(FF = 1, V = exp(param[1]), GG = 1, W = exp(param[2]), m0 = 1000, C0 = 1000^2)\n }\n fit &lt;- dlmMLE(Nile, parm = c(0,0), build = modelBuild)\n\nWe need to take the exponential of the estimates to get the estimated variance parameters.\n\n exp(fit$par)\n\n[1] 15101.339  1467.049\n\n\nor the square roots, to get the maximum likelihood estimates of the standard deviations\n\nsqrt(exp(fit$par))\n\n[1] 122.88750  38.30208\n\n\nWe can redo the filter, this time using the maximum likelihood estimates of the parameters:\n\nmodel_mle = dlm(FF = 1, V = exp(fit$par[1]), GG = 1, W = exp(fit$par[2]), m0 = 1000, C0 = 1000^2)\nnileFilter &lt;- dlmFilter(Nile, model_mle)\nplot(Nile, type = 'l', col = \"steelblue\", lwd = 1.5)\nlines(dropFirst(nileFilter$m), type = 'l', col = \"orange\", lwd = 1.5)\nlegend(\"bottomleft\", legend = c(\"Observed\", \"Filtered\"), lwd = 1.5, lty = 1, \n    col = c(\"steelblue\", \"orange\"))\n\n\n\n\n\n\n\n\n\n\nSmoothing\nWe can also use the dlm package to compute the smoothed retrospective estimates of the local level \\(\\mu_t\\) at time \\(t\\) using all the data from \\(t=1\\) until the end of the time series \\(T\\). We haven‚Äôt showed the mathematical algorithm for smoothing, but you can look it up in many books. Anyway, here is the smoothing results for the Nile data, using the function dlmSmooth from the dlm package. The filtered estimates are also shown.\n\nnileSmooth &lt;- dlmSmooth(Nile, model_mle)\nplot(Nile, type = 'l', col = \"steelblue\", lwd = 1.5)\nlines(dropFirst(nileFilter$m), type = 'l', col = \"orange\", lwd = 1.5)\nlines(dropFirst(nileSmooth$s), type = 'l', col = \"red\", lwd = 1.5)\nlegend(\"bottomleft\", legend = c(\"Observed\", \"Filtered\",\"Smoothed\"), lty = 1, lwd = 1.5, col = c(\"steelblue\", \"orange\", \"red\"))\n\n\n\n\n\n\n\n\n\n\nForecasting\nWe can also use state-space models for forecasting. Here is how it is done in the dlm package.\n\nnileFore &lt;- dlmForecast(nileFilter, nAhead = 5)\nsqrtR &lt;- sapply(nileFore$R, function(x) sqrt(x))\npl &lt;- nileFore$a[,1] + qnorm(0.05, sd = sqrtR)\npu &lt;- nileFore$a[,1] + qnorm(0.95, sd = sqrtR)\nx &lt;- ts.union(window(Nile, start = c(1900, 1)),\n              window(nileSmooth$s, start = c(1900, 1)), \n              nileFore$a, pl, pu)\n\nplot(x, plot.type = \"single\", type = 'o', pch = c(NA, NA, NA, NA, NA), lwd = 1.5,\n     col = c(\"steelblue\", \"red\", \"brown\", \"gray\", \"gray\"),\n     ylab = \"River flow\")\nlegend(\"bottomleft\", legend = c(\"Observed\", \"Smoothed\", \"Forecast\", \n    \"90% probability limit\"), bty = 'n', pch = c(NA, NA, NA, NA, NA), lty = 1, lwd = 1.5,\n    col = c(\"steelblue\", \"red\", \"brown\", \"gray\", \"gray\"))"
  },
  {
    "objectID": "tutorial/statespace/statespace.html#non-gaussian-state-space-models",
    "href": "tutorial/statespace/statespace.html#non-gaussian-state-space-models",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "Non-Gaussian state-space models",
    "text": "Non-Gaussian state-space models\n\nPoisson time series model\nA useful model for time series of counts \\(Y \\in \\{0,1,2,\\ldots \\}\\) is a Poisson distribution with time-varying intensity \\(\\lambda_t = \\exp(z_t)\\), where \\(z_t\\) is some continuous stochastic process with autocorrelation, most commonly a random walk:\n\\[\n\\begin{align} y_t \\vert z_t &\\overset{\\mathrm{indep}}{\\sim} \\mathrm{Pois}(\\exp(z_t)) \\\\  \nz_t &= z_{t-1} + \\eta_t, \\qquad \\eta_t \\sim N(0, \\sigma^2_\\eta)\n\\end{align}\n\\]\nNote that because of the exponential function \\(\\lambda_t = \\exp(z_t)\\) is guaranteed to be positive for all \\(t\\), as required for the Poisson distribution. It is easily to simulate data from the Poisson time series model:\n\n# Set up the simulation function, starting the z_t process at zero.\nsimPoisTimeSeries &lt;- function(T, sigma_eta){\n  \n  # Simulate the z_t process\n  z = rep(0,T+1)\n  for (t in 2:(T+1)){\n    z[t] = z[t-1] + rnorm(1, mean = 0, sd = sigma_eta)\n  }\n  \n  # Simulate the Poisson variables with different intensities, lambda_t = exp(z_t) for each time\n  lambda = exp(z)\n  return (rpois(T, lambda = lambda[2:(T+1)]))\n}\n\n\n\nShow the code\n# Simulate and plot the time series\nset.seed(1) \nT = 100\nsigma_eta = 0.1\ny = simPoisTimeSeries(T, sigma_eta)\nplot(y, type = \"o\", pch = 19, col = \"steelblue\", yaxt = \"n\", xlab = \"time, t\", ylab = \"counts, y\", \n      main = paste(\"A simulated Poisson time series with sigma_eta =\", sigma_eta))\naxis(side = 2, at = seq(0,max(y)))\n\n\n\n\n\n\n\n\n\nWhat‚Äôs life without widgets? Here is one for a slightly more general Poisson time series model where the random walk is replaced by an autoregressive process of order 1:\n\\[\n\\begin{align}\ny_t \\vert z_t &\\overset{\\mathrm{indep}}{\\sim} \\mathrm{Pois}(\\exp(z_t)) \\\\  \nz_t &= \\mu + \\phi(z_{t-1} -\\mu) + \\eta_t, \\qquad \\eta_t \\sim N(0, \\sigma^2_\\eta)\n\\end{align}\n\\]\n\n\n\nStochastic volatility models\nMany time series, particularly in the finance, has a variance that is changing over time. Furthermore, it is common to find volatility clustering in the data, meaning that once the the variance is high (turbulent stock market) it tends to remain high for a while and vice versa. The basic stochastic volatility (SV) model tries to capture this:\n\\[\n\\begin{align}\ny_t &= \\mu + \\varepsilon_t, \\hspace{0.8cm} \\varepsilon_t \\overset{\\mathrm{indep}}{\\sim}N(0,\\exp(z_t)), \\\\\nz_t &= z_{t-1} + \\eta_t, \\quad \\eta_t \\overset{\\mathrm{iid}}{\\sim}N(0, \\sigma^2_\\eta)\n\\end{align}\n\\]\nwhere we have for simplicity assumed just a constant mean \\(\\mu\\), but we can extend this with and autoregressive process, or basically any model of your preference. The thing that set the SV model apart from the other model presented so far is that the variance of the measurement errors \\(Var(y_t)=Var(\\varepsilon_t) = \\exp(z_t)\\) is heteroscedastic, that is, it varies over time. The variance is driven by the \\(z_t\\) process, which here is modeled as a random walk, which will induce volatility clustering. Note again that we use the exponential function to ensure that the variance is positive for all \\(t\\). Here is code to simulate from this basic stochastic volatility model:\n\n# Set up the simulation function, starting the z_t process at zero.\nsimStochVol &lt;- function(T, mu, sigma_eta){\n  \n  # Simulate the z_t process\n  z = rep(0,T+1)\n  for (t in 2:(T+1)){\n    z[t] = z[t-1] + rnorm(1, mean = 0, sd = sigma_eta)\n  }\n  \n  # Simulate the y_T with a different variance in for each sigma¬≤_t = exp(z_t) for each t\n  sigma2eps = exp(z)\n  y = rnorm(T+1, mean = mu, sd = sqrt(sigma2eps))\n  return ( list(y = y[2:(T+1)], sigmaeps = sqrt(sigma2eps)[2:(T+1)])  )\n}\n\nLet‚Äôs use that function to simulate a time series and plot it:\n\n\nShow the code\n# Simulate and plot the time series\nset.seed(2) \nT = 100\nmu = 3\nsigma_eta = 1\nsimuldata = simStochVol(T, mu, sigma_eta)\nplot(simuldata$y, type = \"l\", col = \"steelblue\", xlab = \"time, t\", ylab = \"y\", \n     main = paste(\"A simulated stochastic volatility process with sigma_eta =\", sigma_eta),\n     ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)\nlines(simuldata$sigmaeps, col = \"orange\", lwd = 2)\nlegend(\"bottomright\", legend = c(\"time series\", \"standard deviation\"), lty = 1, lwd = c(2,2),\n    col = c(\"steelblue\", \"orange\"))\n\n\n\n\n\n\n\n\n\nWe can replace the random walk for the \\(z_t\\) with a more well-behaved AR(1) process:\n\\[\n\\begin{align}\ny_t &= \\mu_y + \\varepsilon_t, \\hspace{0.8cm} \\varepsilon_t \\overset{\\mathrm{indep}}{\\sim}N(0,\\exp(z_t)), \\\\\nz_t &= \\mu_z + \\phi(z_{t-1} - \\mu_z) + \\eta_t, \\quad \\eta_t \\overset{\\mathrm{iid}}{\\sim}N(0, \\sigma^2_\\eta)\n\\end{align}\n\\]\nwhere \\(\\mu_y\\) is the mean of the time series \\(y\\) and \\(\\mu_z\\) is the mean of the (log) variance process \\(z_t\\). The parameter \\(\\mu_z\\) therefore determines how much variance \\(y_t\\) has on average and \\(\\phi\\) determines how much volatility clustering there is. A \\(\\phi\\) close to 1 gives long periods of persistently large or small variance. Here is the code:\n\n# Set up the simulation function, starting the z_t process at zero.\nsimStochVolAR &lt;- function(T, mu_y, mu_z, phi, sigma_eta){\n  \n  # Simulate the z_t process\n  z = rep(0,T+1)\n  for (t in 2:(T+1)){\n    z[t] = mu_z + phi*(z[t-1] - mu_z) + rnorm(1, mean = 0, sd = sigma_eta)\n  }\n  \n  # Simulate the y_T with a different variance in for each sigma¬≤_t = exp(z_t) for each t\n  sigma2eps = exp(z)\n  y = rnorm(T+1, mean = mu_y, sd = sqrt(sigma2eps))\n  return ( list(y = y[2:(T+1)], sigmaeps = sqrt(sigma2eps)[2:(T+1)])  )\n}\n\n\n\nShow the code\n# Simulate and plot the time series\nset.seed(1)\nT = 1000\nmu_y = 3\nmu_z = -1\nphi = 0.95\nsigma_eta = 1\nsimuldata = simStochVolAR(T, mu_y, mu_z, phi, sigma_eta)\nplot(simuldata$y, type = \"l\", col = \"steelblue\", xlab = \"time, t\", ylab = \"y\", \n     main = paste(\"A simulated stochastic volatility process with sigma_eta =\", sigma_eta),\n     ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)\nlines(simuldata$sigmaeps, col = \"orange\", lwd = 2)\nlegend(\"bottomright\", legend = c(\"time series\", \"standard deviation\"), lty = 1, lwd = c(2,2),\n    col = c(\"steelblue\", \"orange\"))\n\n\n\n\n\n\n\n\n\nWidget time!"
  },
  {
    "objectID": "tutorial/statespace/statespace.html#bonus-implementing-the-kalman-filter-from-scratch",
    "href": "tutorial/statespace/statespace.html#bonus-implementing-the-kalman-filter-from-scratch",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "Bonus: Implementing the Kalman filter from scratch",
    "text": "Bonus: Implementing the Kalman filter from scratch\nFor the curious, the code below implements the Kalman filter from scratch in R. Let us first implement a function kalmanfilter_update that does the update for a single time step:\n\nkalmanfilter_update &lt;- function(mu, Omega, y, G, C, V, W) {\n  \n  # Prediction step - moving state forward without new measurement\n  muPred &lt;- G %*% mu\n  omegaPred &lt;- G %*% Omega %*% t(G) + W\n  \n  # Measurement update - updating the N(muPred, omegaPred) prior with the new data point\n  K &lt;- omegaPred %*% t(F) / (F %*% omegaPred %*% t(F) + V) # Kalman Gain\n  mu &lt;- muPred + K %*% (y - F %*% muPred)\n  Omega &lt;- (diag(length(mu)) - K %*% F) %*% omegaPred\n  \n  return(list(mu, Omega))\n}\n\nThen we implement a function that does all the Kalman iterations, using the kalmanfilter_update function above:\n\nkalmanfilter &lt;- function(Y, G, F, V, W, mu0, Sigma0) {\n  T &lt;- dim(Y)[1]  # Number of time steps\n  n &lt;- length(mu0)  # Dimension of the state vector\n  \n  # Storage for the mean and covariance state vector trajectory over time\n  mu_filter &lt;- matrix(0, nrow = T, ncol = n)\n  Sigma_filter &lt;- array(0, dim = c(n, n, T))\n  \n  # The Kalman iterations\n  mu &lt;- mu0\n  Sigma &lt;- Sigma0\n  for (t in 1:T) {\n    result &lt;- kalmanfilter_update(mu, Sigma, t(Y[t, ]), G, F, V, W)\n    mu &lt;- result[[1]]\n    Sigma &lt;- result[[2]]\n    mu_filter[t, ] &lt;- mu\n    Sigma_filter[,,t] &lt;- Sigma\n  }\n  \n  return(list(mu_filter, Sigma_filter))\n}\n\nLet‚Äôs try it out on the Nile river data:\n\n# Analyzing the Nile river data\nprettycolors = c(\"#6C8EBF\", \"#c0a34d\", \"#780000\")\ny = as.vector(Nile)\nV = 100^2\nW = 100^2\nmu0 = 1000\nSigma0 = 1000^2\n\n# Set up state-space model for local level model\nT = length(y)\nG = 1\nF = 1\nY = matrix(0,T,1)\nY[,1] = y\nfilterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)\nmeanFilter = filterRes[[1]]\nstd_filter = sqrt(filterRes[[2]][,,, drop =TRUE])\n\nplot(seq(1:T), y, type = \"l\", col = prettycolors[1], lwd = 1.5, xlab = \"time, t\")\npolygon(c(seq(1:T), rev(seq(1:T))), \n        c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)), \n        col = \"#F0F0F0\", border = NA)\nlines(seq(1:T), y, type = \"l\", col = prettycolors[1], lwd = 1.5, xlab = \"time, t\")\nlines(seq(1:T), meanFilter, type = \"l\", col = prettycolors[3], lwd = 1.5)\nlegend(\"topright\", legend = c(\"time series\", \"filter mean\", \"95% intervals\"), lty = 1, lwd = 1.5,\n    col = c(prettycolors[1], prettycolors[3], \"#F0F0F0\"))"
  },
  {
    "objectID": "tutorial/statespace/statespace.html#footnotes",
    "href": "tutorial/statespace/statespace.html#footnotes",
    "title": "State-space models - filtering, smoothing and forecasting",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nClicking on the  below the widget will take you to the Observable notebook of the widget where you can also change the locations of the thresholds, \\(t_1,t_2,\\ldots,t_{K-1}\\), if you are really into that sort of thing.‚Ü©Ô∏é\nIts all about that Bayes\nThe Kalman filter is often presented from a frequentist point of view in statistics, where the Kalman filtered estimates are the optimal estimates in the mean square error sense.\n\nThe Kalman filter can also be derived as simple Bayesian updating, using Bayes‚Äô theorem to update the information about the state as a new measurement comes in. The \\(\\boldsymbol{\\mu_{0|0}}\\) and \\(\\boldsymbol{\\Omega_{0|0}}\\) can be seen as the prior mean and prior covariance matrix summarizing your prior information about the state before collecting any measurements.\n\nThe Kalman filter is great. When something is great, Bayes usually lurks in the background! üòú‚Ü©Ô∏é"
  },
  {
    "objectID": "homeassignment.html",
    "href": "homeassignment.html",
    "title": "Home assignment for Statistical Theory and Methods, 7.5 hp",
    "section": "",
    "text": "The course has two mandatory home assignments.\n\nHome assignment \nMaterial: html"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials for Statistical Theory and Methods, 7.5 hp",
    "section": "",
    "text": "Tutorials\n\nMaximum likelihood by numerical optimization html | quarto\nBootstrap html | quarto\nState-space models html | quarto (Not used in the course, but pretty cool)"
  },
  {
    "objectID": "computerlabs.html",
    "href": "computerlabs.html",
    "title": "Computer labs for Statistical Theory and Methods, 7.5 hp",
    "section": "",
    "text": "Computer lab 1 - Probability models. Monte Carlo simulation\nMaterial: html\nComputer lab 2 - Numerical maximum likelihood.\nMaterial: html"
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures for Statistical Theory and Modelling, 7.5 hp",
    "section": "",
    "text": "This page contains a short description of the contents, reading instructions and additional material for each lecture.\n\n\nSchedule\nThe course schedule can be found on TimeEdit.\n\n\nLiterature\nThe reading suggestions marked MSA below are section numbers from the course book Wackerley, Mendenhall and Scheaffer (2021). Mathematical Statistics with Applications, 7th edition, Cengage.\n\n\nLecture contents\n\nLecture 1 - Derivation. Optimization. Integration.\nRead: Exponential function | Logarithms | Derivatives | Integrals | Slides\nWidgets: Common functions and their derivatives\n\nLecture 2 - Discrete random variables.\nRead: If needed, refresh basic probability in Ch. 12-13 in the SDA1 course book | MSA 3.1-3.6, 3.8, 3.11 | Slides\nWidgets: Bernoulli | Binomial | Geometric | Poisson | Negative binomial | Chebychev‚Äôs inequality\n\nLecture 3 - Continuous random variables.\nRead: MSA 4.1-4.8, 4.10 | Slides\nWidgets: Normal | Exponential | Beta | Student-t | Gamma\n\nLecture 4 - Joint and conditional distributions. Covariance and correlation. Bayes theorem.\nRead: MSA 5.1-5.8, 5.11 | Slides\n\nLecture 5 - Transformation of random variables. Monte Carlo simulation. Law of large numbers. Central limit theorem.\nRead: MSA 6.1-6.4, 7.3 | Law of large numbers notebook | central limit theorem notebook | Slides\nWidgets: Law of large numbers | central limit theorem\n\nLecture 6 - Point estimation. Maximum likelihood. Sampling distributions.\nRead: MSA 9.1-9.2, 9.3 (pages 448-451), 9.4, 9.7 | Slides\nWidgets: Sampling distribution and Likelihood | ML - Bernoulli data | ML - Poisson data\n\nLecture 7 - Vectors and matrices. Multivariate normal distribution. Linear regression in vector form.\nRead: MSA A1.1-A1.7, 5.10, 11.10-11.11 | Slides\nWidgets: Bivariate normal distribution\nLecture 8 - Observed and Fisher information. Numerical optimization.\nRead: X | Slides | tutorial on numerical ML\nWidgets: Second derivative as function curvature\n\nLecture 9 - Logistic and Poisson regression.\nRead: X | Slides\n\nLecture 10 - Poisson regression and beyond\nRead: X | Slides\n\nLecture 11 - Nonlinear regression. Regularization.\nRead: X | Slides\nCode:\nData:\n\nLecture 12 - Time series. Autocorrelation function. Autoregressive models.\nRead: X | Slides\nCode:\nData:\n\nLecture 13 - Course summary and example exam.\nRead: X | Slides\nCode:\nData:"
  },
  {
    "objectID": "admin/KB.html",
    "href": "admin/KB.html",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "The course is part of the Master‚Äôs program in data science, statistics and decision analysis, 120 credits.\n\n\nThis course is a continuation of the course Statistics and Data Analysis for Computer and Systems Sciences, 15 credits. It provides advanced and expanded knowledge in probability theory, modelling, and statistical inference theory, which forms the foundation for modern machine learning and AI. Theoretical derivations are connected with practical applications in programming languages for data analysis and machine learning. Regression and classification models are a significant part of the course. Prediction-based methods such as cross-validation are used for model selection. The course offers an introduction to the mathematical methods that are essential tools for the course and ends with an introduction to time series analysis.\nThe following topics are covered:\n\nMathematical methods: derivatives, integrals, optimization, numerical optimization, vectors, and matrices.\nProbability theory: discrete and continuous stochastic variables, density and probability functions, distribution functions, multivariate distributions, multivariate normal distribution, marginal distributions, conditional distributions, independence, expected value, variance, and covariance, functions of stochastic variables, sampling distributions, law of large numbers, central limit theorem.\nModelling and prediction: linear and non-linear regression, dummy variables and interactions, model selection, cross-validation, overfitting, regularization, classification, logistic regression, multinomial logistic regression, Poisson regression.\nInference: point estimations, bias-variance trade-off, maximum likelihood (ML), likelihood theory, numerical optimization for ML estimations, bootstrap.\nTime series: trend and seasonality, autocorrelation, autoregressive models.\n\nThe examination consists of\n\nExam 1 (exam code 11ST): Statistical theory and modelling, exam.\nExam 2 (exam code 12SI): Statistical theory and modelling, home assignment.\n\n\n\n\nTo pass the course, students should be able to:\nKnowledge and comprehension:\n\nDefine and describe theoretical concepts in probability.\nExplain the principles behind inference methods and their use in practical applications.\nSelect appropriate models and methods depending on the situation and research question within the course content.\n\nSkills and abilities:\n\nFormulate and solve problems of advanced nature within probability theory.\nFormulate and solve problems of advanced nature related to estimation, inference, and prediction.\nPerform calculations, simulations, and analyses in a programming language related to the course content.\n\nEvaluation ability and approach:\n\nInterpret, evaluate, and critically review results with respect to relevant scientific aspects.\n\n\n\n\n\n\n\nTeachers\nRoll\n\n\n\n\nMattias Villani\nCourse responsible, examiner and lecturer \n\n\nFasna Kottakkunnan\nExercises and Computer labs \n\n\nRalf Xhaferi\nExercises and Computer labs\n\n\n\nAll teachers have office hours by appointment. Contact us via email to schedule a meeting time (either on campus or via Zoom).\nThe Statistical Department is located at the newly built Campus Albano, Albanov√§gen 12, House 4, 6th floor. General information regarding the department can be found on the department website.\nAll course material - including slides, reading instructions and schedule link - are available on the course page.\nStudent-specific information, submission of the home assignments and messages during the course are handled on the learning platform Athena.\n\n\n\nAfter the course is completed, an evaluation of the course is conducted. The course evaluation is used as part of the quality work for the course and as a means of student influence. The evaluation is carried out by sending a survey via email to all registered course participants. The responses from the course participants are compiled and, along with the final report/course evaluation from the course responsible teacher, uploaded to Athena.\n\n\n\nThe teaching consists of 12 lectures (F1-F12), 8 exercises (√ñ1-√ñ8) and 3 computer lab sessions (DL1-DL3) according to the schedule. There are also eight scheduled slots for getting help from one of the teaching assistants (jour). Please see the link to TimeEdit on the course page for the current schedule.\nParticipation in all teaching activities is voluntary, but strongly recommended. Learning statistics takes a lot of practice and it will be hard to pass the course without the necessary effort.\n\n\n\nExam 1 is an individual written exam - using both pen and paper and computer - graded on a seven-point scale related to the course objectives:\n\n\n\n\n\n\nGrade Scale for Exam 1\n\n\n\nA¬† ¬†Excellent\nB ¬†¬†Very good\nC ¬†¬†Good\nD ¬†¬†Satisfactory\nE¬†¬†¬†Sufficient\nFx¬† Insufficient, requires some additional work\nF¬†¬†¬†Insufficient, requires much more work\n\n\nExam 2 is a group assignment, graded on a two-point scale: pass (G) or fail (U).\nTo pass the course, a minimum grade of E on Exam 1 and a pass grade on Exam 2 are required. The final grade for the course is determined by the grade on Exam 1.\n\nStudents who receive at least an E grade on the exam may not retake the exam for a higher grade.\nGrades of Fx and F on the exam are failing grades and require re-examination. Therefore, students who receive an Fx grade cannot retake the exam for a higher grade.\nStudents who receive an Fx or F grade on an exam have the right to undergo at least four additional exams as long as the course is offered to achieve at least an E grade.\nStudents who receive an Fx or F grade on two occasions from an examiner have the right to request that a different examiner be appointed to determine the grade at the next exam session. This request must be made in writing to the head of department.\nTwo examination opportunities are available for each exam during the current semester.\n\n\n\n\nThe exam (code 11ST) is an individual written exam, using both pen and paper and computer.\nThe exam duration is 5 hours.\nInternet access is not permitted during the exam.\nPersonal code from your own solutions to computer labs is allowed as a resource. The personal code file must be uploaded for verification before the exam (as instructed on Athena).\nCollaboration is not allowed during the exam, nor are any aids other than those permitted by the examiner.\nSpecial accommodations may be allowed upon request to the department‚Äôs study and career counselor and with the examiner‚Äôs approval. Contact the study and career counselor well in advance of the exam, preferably no later than three weeks before the exam date.\nRules governing exams at Stockholm University can be found at: Rules for on-site exams\n\n\n\n\n\n\n\nNote!\n\n\n\nRemember, you must register at least 10 days before the exam. If you have registered correctly, you will receive a confirmation email with an anonymous code. This confirmation serves as your receipt of registration. If you need to re-register for an old course code, you can only do so via email to expedition@stat.su.se. Failure to register means you cannot take the exam!\n\n\nSee TimeEdit for scheduled exam sessions.\n\n\n\n\nThe assignments are group work, with three (3) persons per group. Group division is done on Athena under the ‚ÄúCreate Workgroup‚Äù document in the Assignments folder.\nThe assignment consists of 2 subprojects presented as written reports in R. Instructions for the assignments will be available on Athena at the start of the course.\nCollaboration within the group is allowed, but individual assessment and grading within the group may occur. All group members are responsible for and must be able to account for all parts of the work presented in the reports. Collaboration between groups is permitted, but each group must submit their unique reports. All forms of plagiarism are prohibited, and text matching software may be used as needed. Read Rules and Handling Procedures for Disciplinary Matters.\nExam 2 is graded Pass (all subtasks in both projects approved) or Fail (at least one subtask fails). If one or more subtasks fail, there is an opportunity for correction during the current semester.\nNote! It is not possible to correct if the submission is only made at the second opportunity. This means that if you miss a submission and instead submit at a later time and fail, you cannot correct the assignment.\nNote! All subtasks in both projects must be completed and approved during the current semester for the entire assignment to be approved. Results from subtasks are not saved and cannot be transferred to future semesters.\n\n\n\n\nDeadline for submission of home assignment: TBD\nDeadline for possible correction: TBD\n\n\n\n\n\n\n\n\nThe exam (code 11ST) is an individual written exam, using both pen and paper and computer. The written exam covers material according to the course content.\n\n\n\n\n\n\nExam 1 Grading Criteria\n\n\n\nA (Excellent): The student can excellently use concepts within probability and inference theory not necessarily directly covered in the course. They can solve and interpret complex problems concerning random variables, distributions and estimators correctly and well-structured, set up simple statistical models for specific situations, and use R for calculations and data analysis. Requires at least 90% on the written exam.\nB (Very Good): The student can very effectively use concepts within probability and inference theory covered in the course. They can solve and interpret complex problems concerning random variables, distributions and estimators correctly and well-structured, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 80-89% on the written exam.\nC (Good): The student can effectively use concepts within probability and inference theory covered in the course. They can correctly solve and interpret problems concerning random variables, distributions and estimators, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 70-79% on the written exam.\nD (Satisfactory): The student can satisfactorily use concepts within probability and inference theory covered in the course. They can correctly solve and interpret problems concerning random variables, distributions and estimators, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 60-69% on the written exam.\nE (Sufficient): The student can sufficiently use concepts within probability and inference theory covered in the course. They can mainly correctly solve and interpret problems concerning random variables, distributions and estimators, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 50-59% on the written exam.\nFx (Fail, additional work required): The student‚Äôs performance is insufficient according to at least one criterion for E. Equivalent to 40-49% of points on the written exam.\nF (Fail, much more work required): The student‚Äôs performance shows clear deficiencies according to the criteria for E. Equivalent to 0-39% of points on the written exam.\n\n\n\n\n\nGrading for the assignment is Pass (G) or Fail (U). The following grading criteria apply:\n\n\n\n\n\n\nExam 2 (12ST) Grading Criteria\n\n\n\nG (Pass): The student has set up appropriate statistical models for given situations, demonstrated sufficient ability to use statistical terminology, utilized R correctly, and presented the results in well-written reports following the instructions. All subtasks should be correctly solved.\nU (Fail): The student‚Äôs performance is insufficient according to at least one criterion for Pass.\n\n\n\n\n\n\nThe main book for the course is:\n\nWackerley, Mendenhall and Scheaffer (2021). Mathematical Statistics with Applications, 7th edition, Cengage.\n\nOther course materials such as supplementary materials, lecture notes, exercises, and instructions for assignments will be posted on the course web page. Links to selected online sources will also be provided there."
  },
  {
    "objectID": "admin/KB.html#course-contents",
    "href": "admin/KB.html#course-contents",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "This course is a continuation of the course Statistics and Data Analysis for Computer and Systems Sciences, 15 credits. It provides advanced and expanded knowledge in probability theory, modelling, and statistical inference theory, which forms the foundation for modern machine learning and AI. Theoretical derivations are connected with practical applications in programming languages for data analysis and machine learning. Regression and classification models are a significant part of the course. Prediction-based methods such as cross-validation are used for model selection. The course offers an introduction to the mathematical methods that are essential tools for the course and ends with an introduction to time series analysis.\nThe following topics are covered:\n\nMathematical methods: derivatives, integrals, optimization, numerical optimization, vectors, and matrices.\nProbability theory: discrete and continuous stochastic variables, density and probability functions, distribution functions, multivariate distributions, multivariate normal distribution, marginal distributions, conditional distributions, independence, expected value, variance, and covariance, functions of stochastic variables, sampling distributions, law of large numbers, central limit theorem.\nModelling and prediction: linear and non-linear regression, dummy variables and interactions, model selection, cross-validation, overfitting, regularization, classification, logistic regression, multinomial logistic regression, Poisson regression.\nInference: point estimations, bias-variance trade-off, maximum likelihood (ML), likelihood theory, numerical optimization for ML estimations, bootstrap.\nTime series: trend and seasonality, autocorrelation, autoregressive models.\n\nThe examination consists of\n\nExam 1 (exam code 11ST): Statistical theory and modelling, exam.\nExam 2 (exam code 12SI): Statistical theory and modelling, home assignment."
  },
  {
    "objectID": "admin/KB.html#learning-outcomes",
    "href": "admin/KB.html#learning-outcomes",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "To pass the course, students should be able to:\nKnowledge and comprehension:\n\nDefine and describe theoretical concepts in probability.\nExplain the principles behind inference methods and their use in practical applications.\nSelect appropriate models and methods depending on the situation and research question within the course content.\n\nSkills and abilities:\n\nFormulate and solve problems of advanced nature within probability theory.\nFormulate and solve problems of advanced nature related to estimation, inference, and prediction.\nPerform calculations, simulations, and analyses in a programming language related to the course content.\n\nEvaluation ability and approach:\n\nInterpret, evaluate, and critically review results with respect to relevant scientific aspects."
  },
  {
    "objectID": "admin/KB.html#teachers-and-general-information",
    "href": "admin/KB.html#teachers-and-general-information",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "Teachers\nRoll\n\n\n\n\nMattias Villani\nCourse responsible, examiner and lecturer \n\n\nFasna Kottakkunnan\nExercises and Computer labs \n\n\nRalf Xhaferi\nExercises and Computer labs\n\n\n\nAll teachers have office hours by appointment. Contact us via email to schedule a meeting time (either on campus or via Zoom).\nThe Statistical Department is located at the newly built Campus Albano, Albanov√§gen 12, House 4, 6th floor. General information regarding the department can be found on the department website.\nAll course material - including slides, reading instructions and schedule link - are available on the course page.\nStudent-specific information, submission of the home assignments and messages during the course are handled on the learning platform Athena."
  },
  {
    "objectID": "admin/KB.html#course-evaluation",
    "href": "admin/KB.html#course-evaluation",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "After the course is completed, an evaluation of the course is conducted. The course evaluation is used as part of the quality work for the course and as a means of student influence. The evaluation is carried out by sending a survey via email to all registered course participants. The responses from the course participants are compiled and, along with the final report/course evaluation from the course responsible teacher, uploaded to Athena."
  },
  {
    "objectID": "admin/KB.html#teaching-and-mandatory-participation",
    "href": "admin/KB.html#teaching-and-mandatory-participation",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "The teaching consists of 12 lectures (F1-F12), 8 exercises (√ñ1-√ñ8) and 3 computer lab sessions (DL1-DL3) according to the schedule. There are also eight scheduled slots for getting help from one of the teaching assistants (jour). Please see the link to TimeEdit on the course page for the current schedule.\nParticipation in all teaching activities is voluntary, but strongly recommended. Learning statistics takes a lot of practice and it will be hard to pass the course without the necessary effort."
  },
  {
    "objectID": "admin/KB.html#knowledge-check-and-examination",
    "href": "admin/KB.html#knowledge-check-and-examination",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "Exam 1 is an individual written exam - using both pen and paper and computer - graded on a seven-point scale related to the course objectives:\n\n\n\n\n\n\nGrade Scale for Exam 1\n\n\n\nA¬† ¬†Excellent\nB ¬†¬†Very good\nC ¬†¬†Good\nD ¬†¬†Satisfactory\nE¬†¬†¬†Sufficient\nFx¬† Insufficient, requires some additional work\nF¬†¬†¬†Insufficient, requires much more work\n\n\nExam 2 is a group assignment, graded on a two-point scale: pass (G) or fail (U).\nTo pass the course, a minimum grade of E on Exam 1 and a pass grade on Exam 2 are required. The final grade for the course is determined by the grade on Exam 1.\n\nStudents who receive at least an E grade on the exam may not retake the exam for a higher grade.\nGrades of Fx and F on the exam are failing grades and require re-examination. Therefore, students who receive an Fx grade cannot retake the exam for a higher grade.\nStudents who receive an Fx or F grade on an exam have the right to undergo at least four additional exams as long as the course is offered to achieve at least an E grade.\nStudents who receive an Fx or F grade on two occasions from an examiner have the right to request that a different examiner be appointed to determine the grade at the next exam session. This request must be made in writing to the head of department.\nTwo examination opportunities are available for each exam during the current semester.\n\n\n\n\nThe exam (code 11ST) is an individual written exam, using both pen and paper and computer.\nThe exam duration is 5 hours.\nInternet access is not permitted during the exam.\nPersonal code from your own solutions to computer labs is allowed as a resource. The personal code file must be uploaded for verification before the exam (as instructed on Athena).\nCollaboration is not allowed during the exam, nor are any aids other than those permitted by the examiner.\nSpecial accommodations may be allowed upon request to the department‚Äôs study and career counselor and with the examiner‚Äôs approval. Contact the study and career counselor well in advance of the exam, preferably no later than three weeks before the exam date.\nRules governing exams at Stockholm University can be found at: Rules for on-site exams\n\n\n\n\n\n\n\nNote!\n\n\n\nRemember, you must register at least 10 days before the exam. If you have registered correctly, you will receive a confirmation email with an anonymous code. This confirmation serves as your receipt of registration. If you need to re-register for an old course code, you can only do so via email to expedition@stat.su.se. Failure to register means you cannot take the exam!\n\n\nSee TimeEdit for scheduled exam sessions.\n\n\n\n\nThe assignments are group work, with three (3) persons per group. Group division is done on Athena under the ‚ÄúCreate Workgroup‚Äù document in the Assignments folder.\nThe assignment consists of 2 subprojects presented as written reports in R. Instructions for the assignments will be available on Athena at the start of the course.\nCollaboration within the group is allowed, but individual assessment and grading within the group may occur. All group members are responsible for and must be able to account for all parts of the work presented in the reports. Collaboration between groups is permitted, but each group must submit their unique reports. All forms of plagiarism are prohibited, and text matching software may be used as needed. Read Rules and Handling Procedures for Disciplinary Matters.\nExam 2 is graded Pass (all subtasks in both projects approved) or Fail (at least one subtask fails). If one or more subtasks fail, there is an opportunity for correction during the current semester.\nNote! It is not possible to correct if the submission is only made at the second opportunity. This means that if you miss a submission and instead submit at a later time and fail, you cannot correct the assignment.\nNote! All subtasks in both projects must be completed and approved during the current semester for the entire assignment to be approved. Results from subtasks are not saved and cannot be transferred to future semesters.\n\n\n\n\nDeadline for submission of home assignment: TBD\nDeadline for possible correction: TBD"
  },
  {
    "objectID": "admin/KB.html#grading-criteria",
    "href": "admin/KB.html#grading-criteria",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "The exam (code 11ST) is an individual written exam, using both pen and paper and computer. The written exam covers material according to the course content.\n\n\n\n\n\n\nExam 1 Grading Criteria\n\n\n\nA (Excellent): The student can excellently use concepts within probability and inference theory not necessarily directly covered in the course. They can solve and interpret complex problems concerning random variables, distributions and estimators correctly and well-structured, set up simple statistical models for specific situations, and use R for calculations and data analysis. Requires at least 90% on the written exam.\nB (Very Good): The student can very effectively use concepts within probability and inference theory covered in the course. They can solve and interpret complex problems concerning random variables, distributions and estimators correctly and well-structured, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 80-89% on the written exam.\nC (Good): The student can effectively use concepts within probability and inference theory covered in the course. They can correctly solve and interpret problems concerning random variables, distributions and estimators, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 70-79% on the written exam.\nD (Satisfactory): The student can satisfactorily use concepts within probability and inference theory covered in the course. They can correctly solve and interpret problems concerning random variables, distributions and estimators, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 60-69% on the written exam.\nE (Sufficient): The student can sufficiently use concepts within probability and inference theory covered in the course. They can mainly correctly solve and interpret problems concerning random variables, distributions and estimators, set up simple statistical models for some concrete situations, and use R for calculations and data analysis. Awarded for 50-59% on the written exam.\nFx (Fail, additional work required): The student‚Äôs performance is insufficient according to at least one criterion for E. Equivalent to 40-49% of points on the written exam.\nF (Fail, much more work required): The student‚Äôs performance shows clear deficiencies according to the criteria for E. Equivalent to 0-39% of points on the written exam.\n\n\n\n\n\nGrading for the assignment is Pass (G) or Fail (U). The following grading criteria apply:\n\n\n\n\n\n\nExam 2 (12ST) Grading Criteria\n\n\n\nG (Pass): The student has set up appropriate statistical models for given situations, demonstrated sufficient ability to use statistical terminology, utilized R correctly, and presented the results in well-written reports following the instructions. All subtasks should be correctly solved.\nU (Fail): The student‚Äôs performance is insufficient according to at least one criterion for Pass."
  },
  {
    "objectID": "admin/KB.html#course-literature",
    "href": "admin/KB.html#course-literature",
    "title": "Department of Statistics, VT 2025",
    "section": "",
    "text": "The main book for the course is:\n\nWackerley, Mendenhall and Scheaffer (2021). Mathematical Statistics with Applications, 7th edition, Cengage.\n\nOther course materials such as supplementary materials, lecture notes, exercises, and instructions for assignments will be posted on the course web page. Links to selected online sources will also be provided there."
  },
  {
    "objectID": "coding.html",
    "href": "coding.html",
    "title": "Programming for Statistical Theory and Methods, 7.5 hp",
    "section": "",
    "text": "This is just a skeleton template for a course that will be given in the future."
  },
  {
    "objectID": "tutorial/bootstrap/bootstrap.html",
    "href": "tutorial/bootstrap/bootstrap.html",
    "title": "The bootstrap for approximating sampling distributions",
    "section": "",
    "text": "In this tutorial you will learn about the bootstrap method for approximating the sampling distribution of any estimator, for example the maximum likelihood (ML) estimator. It is a purely simulation-based method that is quite useful in many situations.\nLet‚Äôs first load some libraries that we will use (install them using install.packages() if you haven‚Äôt already).\nlibrary(latex2exp) # to be able to plot mathematical symbols (LaTeX)\nlibrary(remotes)   # to be able to load packages from GitHub\nlibrary(ggplot2)   # fancy plotting\nlibrary(mvtnorm)   # the multivariate normal distribution"
  },
  {
    "objectID": "tutorial/bootstrap/bootstrap.html#footnotes",
    "href": "tutorial/bootstrap/bootstrap.html#footnotes",
    "title": "The bootstrap for approximating sampling distributions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe data comes from the paper: Wegmann, B. och Villani, M. (2011). Bayesian Inference in Structural Second-Price Common Value Auctions, Journal of Business and Economic Statistics pdf‚Ü©Ô∏é"
  },
  {
    "objectID": "interactive_exercises/IEChapter4.html",
    "href": "interactive_exercises/IEChapter4.html",
    "title": "Interactive Exercises - Chapter 4",
    "section": "",
    "text": "Problem W4.1\nUse the widget for the gamma distribution in the scale parameterization (the one used in the course book) for this exercise. Note that the names for the two parameters in the Gamma distribution is not \\(\\alpha\\) and \\(\\beta\\) as in the book, but instead \\(\\alpha\\) and \\(\\theta\\). C‚Äôest la vie. ü§∑‚Äç‚ôÇÔ∏è\n\nStart with the \\(\\mathrm{Gamma}(3,1)\\) distribution and gradually move the first parameter \\(\\alpha\\) toward 1. What happens with the shape of the distribution at \\(\\alpha = 1\\)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe distribution for \\(\\alpha = 1\\) becomes highest in the point \\(x=0\\) with a monotonically decreasing density in \\(x\\). The Gamma distribution with \\(\\alpha = 1\\) is actually the exponential distribution.\n\n\n\n\nLet us explore the effect of the second parameter, the scale parameter \\(\\theta\\).\n\n\nSet \\(\\alpha=2\\) and \\(\\theta=2\\). What is the mean and variance? What is \\(\\mathrm{Pr}(X\\leq 3)\\)?\nSet \\(\\alpha=4\\) and \\(\\theta=1\\), what is the mean and variance and \\(\\mathrm{Pr}(X\\leq 3)\\) now?\nWhat if \\(\\alpha=16\\) and \\(\\theta=0.25\\)?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe mean \\(E(X)= \\alpha \\theta\\) is the same in all the three settings and the variance \\(V(X)=\\alpha \\theta^2\\) decreases as \\(\\theta\\) becomes smaller, and so does \\(\\mathrm{Pr}(X\\leq 3)\\).\n\n\n\n\n\n\nProblem W4.2\nUse the widget for the beta distribution for this exercise.\n\nStart with the \\(\\mathrm{Beta}(1,1)\\) distribution. Is there another name for this distribution?\nNow, change to \\(\\mathrm{Beta}(2,2)\\), then to \\(\\mathrm{Beta}(3,3)\\), then finally to \\(\\mathrm{Beta}(10,10)\\). What can you say about the shape for these settings?\nSet \\(\\alpha\\) and \\(\\beta\\) so that most of the density mass is on the right hand side, i.e.¬†for values close to 1. Give a configuration of \\(\\alpha\\) and \\(\\beta\\) achieves this. Finally, set \\(\\alpha\\) and \\(\\beta\\) so that the values close to \\(x=1\\) has the highest density and the density is monotonically decreasing toward \\(x=0\\).\nCan you make the density symmetric around \\(x=0.5\\) and bathtub shaped with most of the density close to 0 and 1?\n\n\n\n\n\n\nSolution W4.2a.\n\n\n\n\n\nThe density becomes constant over the support (0,1). This is the uniform distribution on (0,1).\n\n\n\n\n\n\n\n\n\nSolution W4.2b.\n\n\n\n\n\nThe Beta distribution is symmetric around \\(x=0.5\\) for all values of \\(\\alpha\\) and \\(\\beta\\) where \\(\\alpha=\\beta\\). When the parameters grows larger the density becomes more concentrated around \\(x=0.5\\).\n\n\n\n\n\n\n\n\n\nSolution W4.2c.\n\n\n\n\n\nFor example \\(\\alpha =20\\) and \\(\\beta=2\\) gives most of the mass near \\(x=1\\). Moving \\(\\beta\\) below 1 (still keeping \\(\\alpha\\) at 20) gives a density that has its maximum at \\(x=1\\) and monotonically decreases as we move down toward \\(x=0\\).\n\n\n\n\n\n\n\n\n\nSolution W4.2d.\n\n\n\n\n\nSetting \\(\\alpha=\\beta\\) and both parameters smaller than 1 gives a symmetric bathtub shape."
  },
  {
    "objectID": "interactive_exercises/IEChapter5.html",
    "href": "interactive_exercises/IEChapter5.html",
    "title": "Interactive Exercises - Chapter 5",
    "section": "",
    "text": "Problem W5.1\nUse the widget for the law of large numbers for this exercise with the population parameters \\(\\mu=3\\) and \\(\\sigma=0.2\\).\n\nWhat is the smallest sample size \\(n\\) that gives a probability of at most \\(0.01\\) for the event that the sample mean deviates from its mean \\(\\mu = 3\\) by at least \\(\\epsilon = 0.1\\) units? That is, use the widget to determine the smallest \\(n\\) for which \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.1) \\leq 0.01.\\]\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe sample size \\(n=26\\) gives \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.1) \\approx 0.01079\\] so this sample size is not large enough. However, for \\(n=27\\) we get \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.1) \\approx 0.009375,\\] which is smaller than the required probability of \\(0.01\\). So \\(n=27\\) is the smallest possible sample size. Check for yourself: \n\n\n\n\nLet‚Äôs be even more demanding now and require that the sample mean can deviate by at most \\(\\epsilon = 0.01\\) units from the mean \\(\\mu\\). What is now the smallest sample size \\(n\\) that achieves this?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe sample size \\(n=2654\\) is the smallest \\(n\\) and \\[\\mathrm{Pr}(\\vert \\bar{X}_n - 3 \\vert &gt; 0.01) \\approx 0.009999\\]\n\n\n\n\n\n\nProblem W5.2\nUse the widget for the central limit theorem for this exercise.\n\nChoose the Beta distribution with parameters \\(\\alpha=0.5\\) and \\(\\beta=0.5\\) as the data distribution. Set sample size \\(n=2\\) and look at the orange histogram that shows the sampling distribution of the sample mean for a sample of size \\(n=2\\). Does it look normally distributed? Continue to increase sample size \\(n\\) to 3, 4, 5 and so on. How large \\(n\\) do you need for the sampling distribution to be approximately normal?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFor \\(n=2\\) the distribution is no longer bathtub shaped, but it is clearly not normal (yet). It is hard to say exactly of course, but already for \\(n=10\\) is the sampling distribution roughly bell shaped like the normal distribution.\n\n\n\n\nrepeat Problem W5.2a, but now for the chi-squared distribution with \\(\\nu=3\\) degrees of freedom.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIt takes at least until \\(n=20\\) for the sampling distribution to no longer have the long right hand tail of the chi-squared distribution.\n\n\n\n\nrepeat Problem W5.2a, but now for the Cauchy distribution with location \\(m=0\\) and scale \\(\\gamma=1\\). How large must \\(n\\) be before the sampling distribution of \\(\\bar{X}\\) seems to be approximately normal?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe Cauchy distribution is one of the cases where the central limit theorem does not hold. No matter how large you make \\(n\\), the distribution of \\(\\bar{X}\\) will never be normal. The mean and variance of the Cauchy do not exist, which violates the assumptions of the theorem; it has so extremely heavy tails that the mean does not exist, even though the Cauchy distribution is symmetric around the location \\(m\\). ü§Ø"
  }
]