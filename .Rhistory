x = rbinom(10000, size = 10, prob = 0.5)
score  = x*1 + (10 - x)*(-1)
score[score < 0 ] = -1
barplot(table(score)/10000)
(2/3)-(4/5)^2
0.5^(1/4)
0.5^(1/4)
x = rbinom(10000, size = 10, prob = 0.5)
score  = x*1 + (10 - x)*(-0.5)
barplot(table(score)/10000)
# Original
x = rbinom(10000, size = 10, prob = 0.5)
score  = x*1 + (10 - x)*(-1)
score[score < 0 ] = -1
barplot(table(score)/10000)
# With 0 as minimum
x = rbinom(10000, size = 10, prob = 0.5)
score  = x*1 + (10 - x)*(-1)
score[score < 0 ] = 0
barplot(table(score)/10000)
table(score)/10000
# With 0 as minimum
x = rbinom(10000, size = 10, prob = 0.5)
score  = x*1 + (10 - x)*(-1)
score[score < 0 ] = 0
barplot(table(score)/10000)
# With 0 as minimum
x = rbinom(10000, size = 10, prob = 0.5)
x
score  = x*1 + (10 - x)*(-1)
score[score < 0 ] = 0
barplot(table(score)/10000)
nGuess = 5
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = x*1 + (nGuess - x)*(-1)
score[score < 0 ] = -1
barplot(table(score)/10000)
# With 0 as minimum
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = x*1 + (nGuess - x)*(-1)
score[score < 0 ] = 0
barplot(table(score)/10000)
nGuess = 5
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*(-1)
score[score < 0 ] = -1
barplot(table(score)/10000)
# With 0 as minimum
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*(-1)
score[score < 0 ] = 0
barplot(table(score)/10000)
nGuess = 5
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*(-1)
score[score < 0 ] = -1
barplot(table(score)/10000)
# With 0 as minimum
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*(-1)
score[score < 0 ] = 0
barplot(table(score)/10000)
nGuess = 5
negScore = - 0.5
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = -1
barplot(table(score)/10000)
nGuess = 10
negScore = - 0.5
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = -1
barplot(table(score)/10000)
nGuess = 10
negScore = - 0.5
minimumScore = - 1
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
nGuess = 10
negScore = - 0.5
minimumScore = - 1
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
negScore = - 0.0
minimumScore = - 1
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
minimumScore = - 0.5
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
negScore = - 0.5
minimumScore = - 0
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
nGuess = 10
negScore = - 0.5
minimumScore = - 1
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
minimumScore = 0
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
nGuess = 5
negScore = - 0.5
minimumScore = 0
# Original
x = rbinom(10000, size = nGuess, prob = 0.5)
score  = (10-nGuess) + x*1 + (nGuess - x)*negScore
score[score < 0 ] = minimumScore
barplot(table(score)/10000)
nGuess = 5        # Number of questions where student guesses
negScore = -1     # Points when wrong answer
minimumScore = -1 # Lowest score on problem as a whole
probDistScore(nGuess, negScore, minimumScore)
probDistScore <- function(nGuess, negScore, minimumScore, nSim = 10000){
nRightGuess = rbinom(nSim, size = nGuess, prob = 0.5)
nWrongGuess = nGuess - nRightGuess
score  = (10-nGuess) + nRightGuess*1 + nWrongGuess*negScore
score[score < 0 ] = minimumScore
return(table(score)/nSim)
}
nGuess = 5        # Number of questions where student guesses
negScore = -1     # Points when wrong answer
minimumScore = -1 # Lowest score on problem as a whole
probDistScore(nGuess, negScore, minimumScore)
barplot(probDist, title = paste("nGuess = ",nGuess))
probDist = probDistScore(nGuess, negScore, minimumScore)
barplot(probDist, title = paste("nGuess = ", nGuess))
barplot(probDist, main = paste("nGuess = ", nGuess))
barplot(probDist, main = paste("nGuess = ", nGuess, "negScore = ",negScore))
barplot(probDist, main = paste("nGuess = ", nGuess, "negScore = ",negScore, "lowestScore = ", minimumScore))
barplot(probDist, main = paste("nGuess = ", nGuess, ", negScore = ",negScore, ", lowestScore = ", minimumScore))
negScore = -0.5     # Points when wrong answer
minimumScore = -1 # Lowest score on problem as a whole
probDist = probDistScore(nGuess, negScore, minimumScore)
barplot(probDist, main = paste("nGuess = ", nGuess, ", negScore = ",negScore, ", lowestScore = ", minimumScore))
negScore = -1     # Points when wrong answer
minimumScore = -1 # Lowest score on problem as a whole
probDist = probDistScore(nGuess, negScore, minimumScore)
barplot(probDist, main = paste("nGuess = ", nGuess, ", negScore = ",negScore, ", lowestScore = ", minimumScore))
minimumScore = 0 # Lowest score on problem as a whole
probDist = probDistScore(nGuess, negScore, minimumScore)
barplot(probDist, main = paste("nGuess = ", nGuess, ", negScore = ",negScore, ", lowestScore = ", minimumScore))
nGuess = 10        # Number of questions where student guesses
negScore = -1     # Points when wrong answer
minimumScore = 0 # Lowest score on problem as a whole
probDist = probDistScore(nGuess, negScore, minimumScore)
barplot(probDist, main = paste("nGuess = ", nGuess, ", negScore = ",negScore, ", lowestScore = ", minimumScore))
1-exp(-2)
-log(0.5)
log(2)
p =.4;(1/(1-p)^2 + 1/p^2)
p =.4;(1/((1-p)*p^2))
gamma(2)
1*0.2+2*0.2+3*0.6
exp(-15/2)
log(2)
2+3*(5/12)
5/12
x = 1/2*(sqrt(8*u + 1) - 1)
simdens <- function(){x = 1/2*(sqrt(8*u + 1) - 1); return(x)}
simdens()
simdens <- function(){u = runif(1);x = 1/2*(sqrt(8*u + 1) - 1); return(x)}
simdens()
simdens()
simdens()
simdens <- function(nSim){u = runif(nSim);x = 1/2*(sqrt(8*u + 1) - 1); return(x)}
simdens(10)
hist(simdens(10000))
hist(simdens(10000), freq = FALSE)
hist(simdens(100000), freq = FALSE)
hist(1/simdens(100000), freq = FALSE)
hist(1/simdens(100), freq = FALSE)
hist(1/simdens(10000), freq = FALSE)
hist(1/simdens(10000), freq = FALSE)
trim
x = 1/simdens(10000); hist(x[x<=100])
x = 1/simdens(10000); hist(x[x<=20])
x = 1/simdens(10000); hist(x[x<=20], 50)
x = 1/simdens(10000); hist(x[x<=20], 100)
x = 1/simdens(10000); hist(x[x<=10], 100)
xGrid = seq(0.001, 10, length  = 1000)
plot(xGrid, 1/(2*xGrid^2))
lines(xGrid, 1/(2*xGrid^2), type = "l")
lines(xGrid, 1/(2*xGrid^2))
x = 1/simdens(10000); hist(x[x<=10], 100)
lines(xGrid, 1/(2*xGrid^2))
lines(xGrid, 1/(2*xGrid^2) + 1/xGrid^3)
lins(xGrid, 1/(2*xGrid^2) + 1/xGrid^3)
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE)
lines(xGrid, 1/(2*xGrid^2) + 1/xGrid^3)
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE)
lines(xGrid, 1/(2*xGrid^2) + 1/xGrid^3)
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "orange")
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "steelblue")
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "cornflowerblue")
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "cornflowerblue", xlab = "y", main = "Density for Y = 1/X")
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "cornflowerblue", xlab = "y", main = "Density for Y = 1/X", xlim = c(0,10))
x = simdens(10000); hist(x, 100, freq = FALSE, col = "orange", xlab = "x", main = "Density for X", xlim = c(0,1))
xGrid = seq(0, 1, length = 1000); lines(xGrid, x + 1/2)
xGrid = seq(0, 1, length = 1000); lines(xGrid, xGrid + 1/2)
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "cornflowerblue", xlab = "y", main = "Density for Y = 1/X", xlim = c(0,10))
lines(xGrid, 1/(2*xGrid^2) + 1/xGrid^3, col = "indianred")
x = 1/simdens(10000); hist(x[x<=10], 100, freq = FALSE, col = "cornflowerblue", xlab = "y", main = "Density for Y = 1/X", xlim = c(0,10))
xGrid = seq(1, 10, length  = 1000)
lines(xGrid, 1/(2*xGrid^2) + 1/xGrid^3, col = "indianred")
lines(xGrid, 1/(2*xGrid^2) + 1/xGrid^3, col = "indianred", lwd = 3)
nRep = 1000
lambda = 3
nRep = 1000
lambda = 3
n = 10 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50)
hist(lambdaHats, 50)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n))
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n))
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)))
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)))
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)))
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred")
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 1000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 5 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 5 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 5 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 5 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 5 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 5 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 10 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 50 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 100 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 100 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 100 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 100 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 100 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
nRep = 10000
lambda = 3
n = 100 # sample size
lambdaHats = rep(0, nRep)
for (i in 1:nRep){
x = rexp(n, rate = lambda)
lambdaHats[i] = 1/mean(x)
}
hist(lambdaHats, 50, freq = FALSE)
# normal approx
lambdaGrid = seq(0.01, 12, length = 1000)
lines(lambdaGrid, dnorm(lambdaGrid, mean = lambda, sd = lambda/sqrt(n)), col = "indianred", lwd = 3)
x = rexp(n, rate = lambda)
lambdaHat = 1/mean(x)
lambdaHat =
''
lambdaHat = 1/mean(x)
lambdaHat
lambdaHat = 1/mean(x)
lambdaHat/sqrt(n)
lambda/sqrt(n)
