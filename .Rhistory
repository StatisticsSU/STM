nileSmooth <- dlmSmooth(Nile, model_mle)
plot(Nile, type = 'l', col = "steelblue")
lines(dropFirst(nileFilter$m), type = 'l', col = "orange")
lines(dropFirst(nileSmooth$s), type = 'l', col = "red")
legend("bottomleft", legend = c("Observed", "Filtered","Smoothed"), lty = 1, col = c("steelblue", "orange", "red"))
nileSmooth <- dlmSmooth(Nile, model_mle)
plot(Nile, type = 'l', col = "steelblue", lwd = 2)
lines(dropFirst(nileFilter$m), type = 'l', col = "orange", lwd = 2)
lines(dropFirst(nileSmooth$s), type = 'l', col = "red", lwd = 2)
legend("bottomleft", legend = c("Observed", "Filtered","Smoothed"), lty = 1, col = c("steelblue", "orange", "red"))
nileSmooth <- dlmSmooth(Nile, model_mle)
plot(Nile, type = 'l', col = "steelblue", lwd = 2)
lines(dropFirst(nileFilter$m), type = 'l', col = "orange", lwd = 1.5)
lines(dropFirst(nileSmooth$s), type = 'l', col = "red", lwd = 2)
legend("bottomleft", legend = c("Observed", "Filtered","Smoothed"), lty = 1, col = c("steelblue", "orange", "red"))
nileSmooth <- dlmSmooth(Nile, model_mle)
plot(Nile, type = 'l', col = "steelblue", lwd = 1.5)
lines(dropFirst(nileFilter$m), type = 'l', col = "orange", lwd = 1.5)
lines(dropFirst(nileSmooth$s), type = 'l', col = "red", lwd = 1.5)
legend("bottomleft", legend = c("Observed", "Filtered","Smoothed"), lty = 1, col = c("steelblue", "orange", "red"))
nileSmooth <- dlmSmooth(Nile, model_mle)
plot(Nile, type = 'l', col = "steelblue", lwd = 1.5)
lines(dropFirst(nileFilter$m), type = 'l', col = "orange", lwd = 1.5)
lines(dropFirst(nileSmooth$s), type = 'l', col = "red", lwd = 1.5)
legend("bottomleft", legend = c("Observed", "Filtered","Smoothed"), lty = 1, lwd = 1.5, col = c("steelblue", "orange", "red"))
model_mle = dlm(FF = 1, V = exp(fit$par[1]), GG = 1, W = exp(fit$par[2]), m0 = 1000, C0 = 1000^2)
nileFilter <- dlmFilter(Nile, model_mle)
plot(Nile, type = 'l', col = "steelblue", lwd = 1.5)
lines(dropFirst(nileFilter$m), type = 'l', col = "orange", lwd = 1.5)
legend("bottomleft", legend = c("Observed", "Filtered"), lwd = 1.5, lty = 1,
col = c("steelblue", "orange"))
nileFore <- dlmForecast(nileFilter, nAhead = 5)
sqrtR <- sapply(nileFore$R, function(x) sqrt(x))
pl <- nileFore$a[,1] + qnorm(0.05, sd = sqrtR)
pu <- nileFore$a[,1] + qnorm(0.95, sd = sqrtR)
x <- ts.union(window(Nile, start = c(1900, 1)),
window(nileSmooth$s, start = c(1900, 1)),
nileFore$a, pl, pu)
plot(x, plot.type = "single", type = 'o', pch = c(NA, NA, NA, NA, NA), lwd = 1.5,
col = c("steelblue", "red", "brown", "gray", "gray"),
ylab = "River flow")
legend("bottomleft", legend = c("Observed", "Smoothed", "Forecast",
"90% probability limit"), bty = 'n', pch = c(NA, NA, NA, NA, NA), lty = 1, lwd = 1.5,
col = c("steelblue", "red", "brown", "gray", "gray"))
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
T = 100
sigma_eta = 0.1
y = simPoisTimeSeries(T, sigma_eta)
plot(y, type = "o", pch = 19, col = "steelblue", yaxt = "n", xlab = "time, t", ylab = "counts, y",
main = paste("A simulated Poisson time series with sigma_eta =", sigma_eta))
axis(side = 2, at = seq(0,max(y)))
# Set up the simulation function, starting the z_t process at zero.
simPoisTimeSeries <- function(T, sigma_eta){
# Simulate the z_t process
z = rep(0,T+1)
for (t in 2:(T+1)){
z[t] = z[t-1] + rnorm(1, mean = 0, sd = sigma_eta)
}
# Simulate the Poisson variables with different intensities, lambda_t = exp(z_t) for each time
lambda = exp(z)
return (rpois(T, lambda = lambda[2:(T+1)]))
}
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(1)
T = 100
sigma_eta = 0.1
y = simPoisTimeSeries(T, sigma_eta)
plot(y, type = "o", pch = 19, col = "steelblue", yaxt = "n", xlab = "time, t", ylab = "counts, y",
main = paste("A simulated Poisson time series with sigma_eta =", sigma_eta))
axis(side = 2, at = seq(0,max(y)))
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(1)
T = 100
mu = 3
sigma_eta = 1
simuldata = simStochVol(T, mu, sigma_eta)
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(1)
T = 100
mu = 3
sigma_eta = 1
simuldata = simStochVol(T, mu, sigma_eta)
# Set up the simulation function, starting the z_t process at zero.
simStochVol <- function(T, mu, sigma_eta){
# Simulate the z_t process
z = rep(0,T+1)
for (t in 2:(T+1)){
z[t] = z[t-1] + rnorm(1, mean = 0, sd = sigma_eta)
}
# Simulate the y_T with a different variance in for each sigma²_t = exp(z_t) for each t
sigma2eps = exp(z)
y = rnorm(T+1, mean = mu, sd = sqrt(sigma2eps))
return ( list(y = y[2:(T+1)], sigmaeps = sqrt(sigma2eps)[2:(T+1)])  )
}
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(1)
T = 100
mu = 3
sigma_eta = 1
simuldata = simStochVol(T, mu, sigma_eta)
plot(simuldata$y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y",
main = paste("A simulated stochastic volatility process with sigma_eta =", sigma_eta),
ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)
lines(simuldata$sigmaeps, col = "orange", lwd = 2)
legend("topleft", legend = c("time series", "standard deviation"), lty = 1, lwd = c(2,2),
col = c("steelblue", "orange"))
# Set up the simulation function, starting the z_t process at zero.
simStochVolAR <- function(T, mu_y, mu_z, phi, sigma_eta){
# Simulate the z_t process
z = rep(0,T+1)
for (t in 2:(T+1)){
z[t] = mu_z + phi*(z[t-1] - mu_z) + rnorm(1, mean = 0, sd = sigma_eta)
}
# Simulate the y_T with a different variance in for each sigma²_t = exp(z_t) for each t
sigma2eps = exp(z)
y = rnorm(T+1, mean = mu_y, sd = sqrt(sigma2eps))
return ( list(y = y[2:(T+1)], sigmaeps = sqrt(sigma2eps)[2:(T+1)])  )
}
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
T = 1000
mu_y = 3
mu_z = -1
phi = 0.95
sigma_eta = 1
simuldata = simStochVolAR(T, mu_y, mu_z, phi, sigma_eta)
plot(simuldata$y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y",
main = paste("A simulated stochastic volatility process with sigma_eta =", sigma_eta),
ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)
lines(simuldata$sigmaeps, col = "orange", lwd = 2)
legend("topleft", legend = c("time series", "standard deviation"), lty = 1, lwd = c(2,2),
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(2)
T = 100
mu = 3
sigma_eta = 1
simuldata = simStochVol(T, mu, sigma_eta)
plot(simuldata$y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y",
main = paste("A simulated stochastic volatility process with sigma_eta =", sigma_eta),
ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)
lines(simuldata$sigmaeps, col = "orange", lwd = 2)
legend("topleft", legend = c("time series", "standard deviation"), lty = 1, lwd = c(2,2),
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(2)
T = 100
mu = 3
sigma_eta = 1
simuldata = simStochVol(T, mu, sigma_eta)
plot(simuldata$y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y",
main = paste("A simulated stochastic volatility process with sigma_eta =", sigma_eta),
ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)
lines(simuldata$sigmaeps, col = "orange", lwd = 2)
legend("bottomright", legend = c("time series", "standard deviation"), lty = 1, lwd = c(2,2),
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(1)
T = 1000
mu_y = 3
mu_z = -1
phi = 0.95
sigma_eta = 1
simuldata = simStochVolAR(T, mu_y, mu_z, phi, sigma_eta)
plot(simuldata$y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y",
main = paste("A simulated stochastic volatility process with sigma_eta =", sigma_eta),
ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)
lines(simuldata$sigmaeps, col = "orange", lwd = 2)
legend("topleft", legend = c("time series", "standard deviation"), lty = 1, lwd = c(2,2),
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
# Simulate and plot the time series
set.seed(1)
T = 1000
mu_y = 3
mu_z = -1
phi = 0.95
sigma_eta = 1
simuldata = simStochVolAR(T, mu_y, mu_z, phi, sigma_eta)
plot(simuldata$y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y",
main = paste("A simulated stochastic volatility process with sigma_eta =", sigma_eta),
ylim = c(min(simuldata$y,simuldata$sigmaeps), max(simuldata$y,simuldata$sigmaeps)), lwd = 2)
lines(simuldata$sigmaeps, col = "orange", lwd = 2)
legend("bottomright", legend = c("time series", "standard deviation"), lty = 1, lwd = c(2,2),
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
#install.packages("latex2exp")
library(latex2exp)
n = 200
mu = 2
sigma_eps = 1
y = rnorm(n, mean = mu, sd = sigma_eps)
plot(seq(1,n), y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y_t", lwd = 1.5,
main = "Simulated data from the naive iid model")
lines(seq(1,n), rep(mu,n), type = "l", col = "orange")
legend("topright", legend = c(TeX("$y_t$"), TeX("$\\mu$")), lty = 1, lwd = 1.5,
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
#install.packages("latex2exp")
library(latex2exp)
n = 200
mu = 2
sigma_eps = 1
y = rnorm(n, mean = mu, sd = sigma_eps)
plot(seq(1,n), y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y_t", lwd = 1.5,
main = "Simulated data from the naive iid model")
lines(seq(1,n), rep(mu,n), type = "l", col = "orange")
legend("topright", legend = c(TeX("$y_t$"), TeX("$\\mu$")), lty = 1, lwd = 1.5,
col = c("steelblue", "orange"))
#| code-fold: true
#| code-summary: "Show the code"
#install.packages("latex2exp")
library(latex2exp)
n = 200
mu = 2
sigma_eps = 1
y = rnorm(n, mean = mu, sd = sigma_eps)
plot(seq(1,n), y, type = "l", col = "steelblue", xlab = "time, t", ylab = "y_t", lwd = 1.5,
main = "Simulated data from the naive iid model")
lines(seq(1,n), rep(mu,n), type = "l", col = "orange")
legend("topright", legend = c(TeX("$y_t$"), TeX("$\\mu$")), lty = 1, lwd = 1.5,
col = c("steelblue", "orange"))
kalmanfilter_update <- function(mu, Omega, y, G, C, V, W) {
# Prediction step - moving state forward without new measurement
muPred <- G %*% mu
omegaPred <- G %*% Omega %*% t(G) + W
# Measurement update - updating the N(muPred, omegaPred) prior with the new data point
K <- omegaPred %*% t(F) / (F %*% omegaPred %*% t(F) + V) # Kalman Gain
mu <- muPred + K %*% (y - F %*% muPred)
Omega <- (diag(length(mu)) - K %*% F) %*% omegaPred
return(list(mu, Omega))
}
# Analyzing the Nile river data
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
kalmanfilter_update <- function(mu, Omega, y, G, C, V, W) {
# Prediction step - moving state forward without new measurement
muPred <- G %*% mu
omegaPred <- G %*% Omega %*% t(G) + W
# Measurement update - updating the N(muPred, omegaPred) prior with the new data point
K <- omegaPred %*% t(F) / (F %*% omegaPred %*% t(F) + V) # Kalman Gain
mu <- muPred + K %*% (y - F %*% muPred)
Omega <- (diag(length(mu)) - K %*% F) %*% omegaPred
return(list(mu, Omega))
}
kalmanfilter <- function(Y, G, F, V, W, mu0, Sigma0) {
T <- dim(Y)[1]  # Number of time steps
n <- length(mu0)  # Dimension of the state vector
# Storage for the mean and covariance state vector trajectory over time
mu_filter <- matrix(0, nrow = T, ncol = n)
Sigma_filter <- array(0, dim = c(n, n, T))
# The Kalman iterations
mu <- mu0
Sigma <- Sigma0
for (t in 1:T) {
result <- kalmanfilter_update(mu, Sigma, t(Y[t, ]), G, F, V, W)
mu <- result[[1]]
Sigma <- result[[2]]
mu_filter[t, ] <- mu
Sigma_filter[,,t] <- Sigma
}
return(list(mu_filter, Sigma_filter))
}
# Analyzing the Nile river data
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
plot.new
plot.new()
# Analyzing the Nile river data
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot.new
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = colors[1], lwd = 1.5, xlab = "time, t")
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot.new
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot.new()
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot.new()
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
legend("bottomright", legend = c("time series", "filter mean", "95% intervals"), lty = 1, lwd = 1.5,
col = c(prettycolors[1], prettycolors[3], "#F0F0F0"))
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
legend("topright", legend = c("time series", "filter mean", "95% intervals"), lty = 1, lwd = 1.5,
col = c(prettycolors[1], prettycolors[3], "#F0F0F0"))
# Libraries
library("tidyverse")
install.packages("tidyverse")
install.packages("hrbrthemes")
install.packages("gdtools")
install.packages("hrbrthemes")
library("tidyverse")
library("hrbrthemes")
library("viridis")
require(gridExtra)
hrbrthemes::import_roboto_condensed()
# Load parfaits model LPS
m1 = c(rnorm(49, sd = 0.01),-0.9)
m2 = c(rnorm(48, mean = 22, sd = 2),14,15)
m3 = c(rnorm(48, mean = 32, sd = 10.5),-1,4)
m1 = 5*m1
m2 = 5*m2
m3 = 5*m3
# create a dataset
data <- data.frame(
dgp=c( rep("M1",50), rep("M2",50), rep("M3",50) ),
lps=c( m1 , m2, m3)
)
# create a dataset
data <- data.frame(
dgp=c( rep("M1",50), rep("M2",50), rep("M3",50) ),
lps=c( m1 , m2, m3)
)
data
# Plot
lpsplot <- data %>%
ggplot( aes(x=reorder(dgp,lps), y=lps, fill=dgp )) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.4) +
theme_minimal() +
theme_bw()+
theme(
legend.position="none",
plot.title = element_text(size=11, hjust = 0.5),
strip.background = element_rect(fill = "white", linetype = 0))+
theme(plot.title = element_text(hjust = 0.5)) +
ylab("LPS diff") +
xlab(" ") +
ylim(-5*17, 5*57)
lpsplot
