F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
legend("bottomright", legend = c("time series", "filter mean", "95% intervals"), lty = 1, lwd = 1.5,
col = c(prettycolors[1], prettycolors[3], "#F0F0F0"))
# Analyzing the Nile river data
prettycolors = c("#6C8EBF", "#c0a34d", "#780000")
y = as.vector(Nile)
V = 100^2
W = 100^2
mu0 = 1000
Sigma0 = 1000^2
# Set up state-space model for local level model
T = length(y)
G = 1
F = 1
Y = matrix(0,T,1)
Y[,1] = y
filterRes = kalmanfilter(Y, G, F, V, W, mu0, Sigma0)
meanFilter = filterRes[[1]]
std_filter = sqrt(filterRes[[2]][,,, drop =TRUE])
plot(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
polygon(c(seq(1:T), rev(seq(1:T))),
c(meanFilter - 1.96*std_filter, rev(meanFilter + 1.96*std_filter)),
col = "#F0F0F0", border = NA)
lines(seq(1:T), y, type = "l", col = prettycolors[1], lwd = 1.5, xlab = "time, t")
lines(seq(1:T), meanFilter, type = "l", col = prettycolors[3], lwd = 1.5)
legend("topright", legend = c("time series", "filter mean", "95% intervals"), lty = 1, lwd = 1.5,
col = c(prettycolors[1], prettycolors[3], "#F0F0F0"))
# Libraries
library("tidyverse")
install.packages("tidyverse")
install.packages("hrbrthemes")
install.packages("gdtools")
install.packages("hrbrthemes")
library("tidyverse")
library("hrbrthemes")
library("viridis")
require(gridExtra)
hrbrthemes::import_roboto_condensed()
# Load parfaits model LPS
m1 = c(rnorm(49, sd = 0.01),-0.9)
m2 = c(rnorm(48, mean = 22, sd = 2),14,15)
m3 = c(rnorm(48, mean = 32, sd = 10.5),-1,4)
m1 = 5*m1
m2 = 5*m2
m3 = 5*m3
# create a dataset
data <- data.frame(
dgp=c( rep("M1",50), rep("M2",50), rep("M3",50) ),
lps=c( m1 , m2, m3)
)
# create a dataset
data <- data.frame(
dgp=c( rep("M1",50), rep("M2",50), rep("M3",50) ),
lps=c( m1 , m2, m3)
)
data
# Plot
lpsplot <- data %>%
ggplot( aes(x=reorder(dgp,lps), y=lps, fill=dgp )) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.4) +
theme_minimal() +
theme_bw()+
theme(
legend.position="none",
plot.title = element_text(size=11, hjust = 0.5),
strip.background = element_rect(fill = "white", linetype = 0))+
theme(plot.title = element_text(hjust = 0.5)) +
ylab("LPS diff") +
xlab(" ") +
ylim(-5*17, 5*57)
lpsplot
log(exp(5.2)) # log is the natural logarithm in R
log10(1000)
log10(1000)
log(exp(5.2)) # log is the natural logarithm in R
log2(1024)
log10(1000) # 10^3 = 1000
log2(1024)  # 2^10 = 1024
log(exp(5.2)) # log is the natural logarithm in R
exp(1)  # This is Eulers number
log10(1000) # 10^3 = 1000
log2(1024)  # 2^10 = 1024
log(exp(5.2)) # log is the natural logarithm in R. log() is the inverse of exp()
exp(1)  # This is Eulers number
10^(2.1)
sum
sum_x = 0
for (i in 1:5){
sum_x = sum_x + i^2
}
sum_z
sum_x
f
ff <- function(x){
return x^2
f <- function(x){
return x^2
f <- function(x){
y = x^2
return (y)
}
x = 2
y = f(2) # y is now 4
y
# Square function
f <- function(x){
y = x^2
return (y)
}
x = 2
y = f(2)
# Square function
f <- function(x){
y = x^2
return (y)
}
x = 2
y = f(2)
y
getwd()
g <- function(x){
y = log(x)
return (y)
}
# Outer function
f <- function(x){
y = x^2
return (y)
}
g <- function(x){
y = log(x)
return (y)
}
# Outer function
f <- function(x){
y = x^2
return (y)
}
f(g(2))
g(2)
log(2)
# Inner function
g <- function(x){
z = log(x)
return (z)
}
# Outer function
f <- function(z){
y = z^2
return (y)
}
f(g(2)) #
(0.6931472)^2
1 + 2*x^2 − 0.5*x^3
x = -5
1 + 2*x^2 − 0.5*x^3
1 + 2*x^2 − 0.5*x^3
1 + 3*xx^2
1 + 3*x^2
1 + 3*x^2 -0.5*x^3
x = 8/3
x
1 + 3*x^2 -0.5*x^3
thetaGrid = seq(0.001,5, by = 0.01)
plot(thetaGrid, dpois(2, thetaGrid))
plot(thetaGrid, dpois(2, thetaGrid), lty = "l")
plot(thetaGrid, dpois(2, thetaGrid), type = "l")
plot(thetaGrid, dpois(2, thetaGrid), type = l)
plot(thetaGrid, dpois(2, thetaGrid), type = "l")
thetaGrid = seq(0.001, 10, by = 0.01)
plot(thetaGrid, dpois(2, thetaGrid), type = "l")
plot(thetaGrid, dpois(5, thetaGrid), type = "l")
plot(thetaGrid, dpois(5, thetaGrid), type = "l")
thetaGrid = seq(0.001, 100, by = 0.01)
plot(thetaGrid, dpois(5, thetaGrid), type = "l")
thetaGrid = seq(0.001, 100, by = 0.01, xlim = c(0,20))
plot(thetaGrid, dpois(5, thetaGrid), type = "l", xlim = c(0,20))
n=10; x = rpois(n, lambda = 2)
n = 10
lambda = 2
x = rpois(n, lambda = lambda)
logLikePois <- function(x, lambda){
return sum(dpois(x, lambda = lambda, log = TRUE))
logLikePois <- function(x, lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
?apply
?sapply
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, sapply(lambdaGrid, logLikePois(lambda)))
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, sapply(lambdaGrid, logLikePois(lambda)))
plot(lambdaGrid, sapply(lambdaGrid, logLikePois))
plot(lambdaGrid, sapply(lambdaGrid, logLikePois), type = "l")
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l")
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 1
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 2
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
x
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
n = 10
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,2.5))
n = 2
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,2.5))
n = 2
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,2.5))
n = 2
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,2.5))
n = 2
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,2.5))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
n = 24
lambda = 1
x = rpois(n, lambda = lambda)
logLikePois <- function(lambda){
return(sum(dpois(x, lambda = lambda, log = TRUE)))
}
lambdaGrid = seq(0.001, 20, length = 1000)
plot(lambdaGrid, exp(sapply(lambdaGrid, logLikePois)+20), type = "l",
xlim = c(0,5))
x
exp(2)*(exp(4)-1)/2
exp(2)*(exp(4)-1)/2
gamma(-4)
gamma(4)
?rgeo
rgeom
?rgeom
qq
?qqline
theoretical = 0:0.01:1
qqline(theoretical, qunif(theoretical))
qqline(runif(100), distribution = qunif)
qqline(runif(100), datax = FALSE, distribution = qunif)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
y <- rt(200, df = 5)
qqnorm(y)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
y <- 10*rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
y <- 100*rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
using glmnet
library(glmnet)
install.packages(glmnet)
install.packages("glmnet")
library(glmnet)
mtcars
x = mtcars$hp
x = mtcars$hp/max((mtcars$hp))
x
y = mtcars$mpg
plot(x,y)
glmnet(x,y)
X = cbind(1,x)
glmnet(X,y)
glmnet(X,y)
res = glmnet(X,y)
res$beta
res$lambda
cv.glmnet(X,y)
cv.glmnet(X,y)
cv.glmnet(X,y, alpha = 0)
cv.glmnet(X,y, alpha = 1)
cv.glmnet(X,y, alpha = 0)
res =cv.glmnet(X,y, alpha = 0)
plot(res)
exp(2)
exp(1.8)
exp(1.9)
glmnet(x = X, y = y, alpha = 0, lambda = 6.837)
summary(glmnet(x = X, y = y, alpha = 0, lambda = 6.837))
res = glmnet(x = X, y = y, alpha = 0, lambda = 6.837)
res$beta
res = glmnet(x = X, y = y, alpha = 0, lambda = 0.837)
res$beta
res $lambda
res$beta
summary(res)
X
X = cbind(1,x, x^2, x^3, x^4, x^5, x^6, x^7, x^8, x^9, x^10)
cv.glmnet(X,y, alpha = 0)
res = glmnet(x = X, y = y, alpha = 0, lambda = 7.704)
summary(res)
res$beta
X = cbind(x, x^2, x^3, x^4, x^5, x^6, x^7, x^8, x^9, x^10)
cv.glmnet(X,y, alpha = 0)
res = glmnet(x = X, y = y, alpha = 0, lambda = 7.504)
res$beta
